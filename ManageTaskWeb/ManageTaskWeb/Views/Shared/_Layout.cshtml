<!DOCTYPE html>
<html lang="en">
@{
    if (Session["MemberID"] == null && 
        !Request.Url.AbsolutePath.ToLower().Contains("/home/dangnhap"))
    {
        Response.Redirect("/Home/DangNhap");
        return;
    }
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>

    <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">


    <link href="@Url.Content("~/Content/css/layout.css?v=1")" rel="stylesheet" />

</head>

<body>
    <header>
        <nav>
            <div class="logo">
                <a href="/Home/TrangChu"><img src="~/Content/images/logo.png"></a>
            </div>

            <div class="menu">
                @{
                    var userRole = Session["Role"].ToString();
                }
                
                @switch (userRole)
                {
                    case "Admin":
                        <a href="/Home/DSProject"><i class="fas fa-tasks"></i> Projects</a>
                        <a href="/Home/DSMember"><i class="fas fa-users"></i> Member</a>
                        <a href="/Home/BaoCaoThongKe"><i class="fas fa-chart-bar"></i> Report</a>
                        <a href="#"><i class="fas fa-question-circle"></i> Help</a>
                        break;
                        
                    case "Manager":
                        <a href="/Home/DSProject"><i class="fas fa-tasks"></i> Projects</a>
                        <a href="/Home/BaoCaoThongKe"><i class="fas fa-chart-bar"></i> Report</a>
                        <a href="#"><i class="fas fa-question-circle"></i> Help</a>
                        break;
                        
                    case "HR":
                        <a href="/Home/DSMember"><i class="fas fa-users"></i> Member</a>
                        <a href="#"><i class="fas fa-question-circle"></i> Help</a>
                        break;
                        
                    case "Developer":
                        <a href="/Home/DSProject"><i class="fas fa-tasks"></i> Projects</a>
                        <a href="#"><i class="fas fa-question-circle"></i> Help</a>
                        break;
                        
                    default:
                        <a href="#"><i class="fas fa-question-circle"></i> Help</a>
                        break;
                }
            </div>

            <div class="icons">
                @if (Session["FullName"] != null)
                {
                    <a class="notification-button" onclick="toggleNotifications()">
                        <i class="fas fa-bell"></i>
                        <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
                    </a>

                    <!-- User Avatar & Dropdown Menu -->
                    <div class="dropdown">
                        <a href="#" class="dropdown-toggle">
                            <img src="~/Content/images/member-img/@Session["ImageMember"]">
                            <span style="font-size: 18px">@Session["FullName"]</span>
                        </a>
                        <div class="dropdown-menu">
                            <div style="display: flex; flex-direction: column; padding: 10px">
                                <a href="/Home/TTCaNhan" style="font-size: 18px;">Edit Profile</a>
                                <a href="#" style="font-size: 18px;">Settings</a>
                                <a href="/Home/ChangePassword" style="font-size: 18px;">Change Your Password</a>
                                <div style="display: flex; align-items: center; font-size: 18px;">
                                    <label class="label-dark" for="darkModeToggle" style="margin-right: 10px;">Dark Mode</label>
                                    <input type="checkbox" id="darkModeToggle" style="display: none;">
                                    <label class="switch" for="darkModeToggle"></label>
                                </div>
                                <a href="/Home/Logout" style="font-size: 18px;">Logout</a>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Chỉ hiện nút đăng nhập khi chưa đăng nhập -->
                    <a href="/Home/DangNhap" style="font-size: 18px;">Login</a>
                }
            </div>

        </nav>
        <!--Thong bao-->
        <div id="notificationContainer" class="notification-container" style="display: none;">
            <h3>Notifications</h3>
            <div class="notifications-list">

            </div>
        </div>
    </header>

    <main>
        @RenderBody()
    </main>
    <footer>

        <div class="column">
            <h3>E-Comm</h3>
            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.</p>
        </div>
        <div class="column">
            <h3>Information</h3>
            <ul>
                <li>About Us</li>
                <li>Infomation</li>
                <li>Privacy Policy</li>
                <li>Terms & Conditions</li>
            </ul>
        </div>
        <div class="column">
            <h3>Service</h3>
            <ul>
                <li>About Us</li>
                <li>Infomation</li>
                <li>Privacy Policy</li>
                <li>Terms & Conditions</li>
            </ul>
        </div>
        <div class="column">
            <h3>My Account</h3>
            <ul>
                <li>About Us</li>
                <li>Infomation</li>
                <li>Privacy Policy</li>
                <li>Terms & Conditions</li>
            </ul>
        </div>
        <div class="column">
            <h3>Contact Us</h3>
            <p>E-Comm, 4578 Marmora Road, Glasgow D04 89GR</p>
        </div>

    </footer>

    <div id="scrollToTopBtn" title="Go to top">
        <i class="fas fa-chevron-up"></i>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const darkMode = localStorage.getItem('darkMode');
            if (darkMode === 'enabled') {
                document.body.classList.add('dark-mode');
                document.getElementById('darkModeToggle').checked = true;
            }
        });

        function toggleNotifications() {
            const notificationContainer = document.getElementById('notificationContainer');
            notificationContainer.style.display =
                notificationContainer.style.display === 'none' || notificationContainer.style.display === ''
                    ? 'block'
                    : 'none';

            if (notificationContainer.style.display === 'block') {
                fetch('/Home/GetNotifications') // Lấy thông báo từ server
                    .then(response => response.json())
                    .then(data => {
                        const notificationList = notificationContainer.querySelector('.notifications-list');
                        notificationList.innerHTML = ''; // Clear previous notifications

                        if (data.success && data.notifications.length > 0) {
                            data.notifications.forEach(notification => {
                                const statusClass = notification.IsRead ? 'notification-read' : 'notification-unread';
                                let notificationItem = `
        <div class="notification ${statusClass}" data-id="${notification.NotificationID}" onclick="toggleReadStatus(event, ${notification.NotificationID}, ${notification.IsRead})">
            <div class="content">
                <p class="title">${notification.Content}</p>
                <p class="time">${notification.NotificationDate}</p>
            </div>
            <div class="status">${notification.IsRead ? 'Read' : 'Unread'}</div>`;

                                // Nếu đây là thông báo yêu cầu gia nhập, thêm nút Accept/Reject
                                if (notification.ShowAcceptReject) {
                                    notificationItem += `
            <div class="actions">
                <button class="btn btn-success" onclick="acceptJoinRequest(${notification.NotificationID})">Accept</button>
                <button class="btn btn-danger" onclick="rejectJoinRequest(${notification.NotificationID})">Reject</button>
            </div>`;
                                }

                                notificationItem += `</div>`;
                                notificationList.insertAdjacentHTML('beforeend', notificationItem);
                            });

                        } else {
                            notificationList.innerHTML = '<p>No notifications</p>';
                        }
                    })
                    .catch(error => console.error('Error fetching notifications:', error));
            }
        }

        // Thêm hàm mới để xử lý việc toggle read status
        function toggleReadStatus(event, notificationId, currentIsRead) {
            // Ngăn chặn event bubbling nếu click vào nút Accept/Reject
            if (event.target.classList.contains('btn')) {
                return;
            }

            // Cập nhật UI ngay lập tức
            const notification = event.currentTarget;
            const statusDiv = notification.querySelector('.status');
            
            // Toggle classes ngay lập tức
            notification.classList.toggle('notification-read');
            notification.classList.toggle('notification-unread');
            
            // Cập nhật status text ngay lập tức
            statusDiv.textContent = currentIsRead ? 'Unread' : 'Read';
            
            // Cập nhật số thông báo ngay lập tức
            updateNotificationBadge();

            // Gửi request đến server
            fetch('/Home/ToggleNotificationStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    notificationId: notificationId,
                    currentIsRead: currentIsRead
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Cập nhật onclick handler với trạng thái mới
                    notification.setAttribute('onclick', `toggleReadStatus(event, ${notificationId}, ${!currentIsRead})`);
                } else {
                    // Nếu có lỗi, hoàn tác các thay đổi UI
                    notification.classList.toggle('notification-read');
                    notification.classList.toggle('notification-unread');
                    statusDiv.textContent = currentIsRead ? 'Read' : 'Unread';
                    updateNotificationBadge();
                }
            })
            .catch(error => {
                console.error('Error toggling notification status:', error);
                // Hoàn tác các thay đổi UI nếu có lỗi
                notification.classList.toggle('notification-read');
                notification.classList.toggle('notification-unread');
                statusDiv.textContent = currentIsRead ? 'Read' : 'Unread';
                updateNotificationBadge();
            });
        }

        function acceptJoinRequest(notificationId) {
            fetch(`/Home/AcceptJoinRequest?notificationId=${notificationId}`,{
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert(data.message); // Hiển thị thông báo từ server
                        toggleNotifications(); // Reload danh sách thông báo sau khi xử lý thành công
                    } else {
                        alert('Error: ' + data.message); // Hiển thị lỗi nếu có
                    }
                })
                .catch(error => {
                    console.error('Error accepting join request:', error);
                    alert('There was an error while processing your request: ' + error.message); // Thông báo lỗi chi tiết
                });
        }

        function rejectJoinRequest(notificationId) {
            // Tìm thông báo chứa nút reject vừa được nhấn
            const notificationElement = document.querySelector(`.notification[data-id="${notificationId}"]`);

            // Kiểm tra nếu input đã tồn tại
            if (notificationElement.querySelector('.reject-reason')) return;

            // Tạo thẻ input và nút confirm
            const input = document.createElement('input');
            input.type = 'text';
            input.placeholder = 'Enter reject reason...';
            input.classList.add('reject-reason', 'form-control', 'mt-2');

            const confirmButton = document.createElement('button');
            confirmButton.textContent = 'Confirm';
            confirmButton.classList.add('btn', 'btn-primary', 'mt-2');

            // Gửi lý do reject khi nhấn Confirm
            confirmButton.addEventListener('click', function () {
                const reason = input.value.trim();
                if (!reason) {
                    alert('Please enter a reason.');
                    return;
                }

                fetch(`/Home/RejectJoinRequest`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        notificationId: notificationId,
                        reason: reason
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(data.message); // Hiển thị thông báo từ server
                            toggleNotifications(); // Refresh notifications sau khi reject
                        } else {
                            alert('Error: ' + data.message); // Thông báo lỗi nếu có
                        }
                    })
                    .catch(error => {
                        console.error('Error rejecting join request:', error);
                        alert('There was an error while rejecting your request.');
                    });
            });

            // Thêm thẻ input và nút confirm vào giao diện
            notificationElement.appendChild(input);
            notificationElement.appendChild(confirmButton);
        }




        // Đóng danh sách thông báo khi nhấn ra ngoài
        window.addEventListener('click', function (event) {
            const notificationContainer = document.getElementById('notificationContainer');
            const notificationButton = document.querySelector('.notification-button');

            if (!notificationContainer.contains(event.target) && !notificationButton.contains(event.target)) {
                notificationContainer.style.display = 'none';
            }
        });

        //Dropdown Menu
        document.addEventListener('click', function (e) {
            var dropdown = document.querySelector('.dropdown-menu');
            var avatar = document.querySelector('.dropdown-toggle');

            if (avatar.contains(e.target)) {
                dropdown.classList.toggle('show');
            } else {
                dropdown.classList.remove('show');
            }
        });

        //Nut Go to top
        const scrollToTopBtn = document.getElementById('scrollToTopBtn');
        scrollToTopBtn.addEventListener('click', function () {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
        window.addEventListener('scroll', function () {
            if (window.scrollY > 160) {
                scrollToTopBtn.style.display = 'block';
            } else {
                scrollToTopBtn.style.display = 'none';
            }
        });

        // Toggle Dark Mode
        document.getElementById('darkModeToggle').addEventListener('change', function () {
            if (this.checked) {
                document.body.classList.add('dark-mode');
                localStorage.setItem('darkMode', 'enabled');
            } else {
                document.body.classList.remove('dark-mode');
                localStorage.setItem('darkMode', 'disabled');
            }
        });

        // Hàm để cập nhật số thông báo chưa đọc
        function updateNotificationBadge() {
            fetch('/Home/GetNotifications')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.notifications) {
                        const unreadCount = data.notifications.filter(n => !n.IsRead).length;
                        const badge = document.getElementById('notificationBadge');
                        if (unreadCount > 0) {
                            badge.style.display = 'flex';
                            badge.textContent = unreadCount;
                        } else {
                            badge.style.display = 'none';
                        }
                    }
                })
                .catch(error => console.error('Error fetching notifications:', error));
        }

        // Gọi hàm khi trang web được tải
        document.addEventListener('DOMContentLoaded', function() {
            updateNotificationBadge();
        });
    </script>
</body>

</html>
