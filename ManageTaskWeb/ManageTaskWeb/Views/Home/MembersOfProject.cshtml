@{
    ViewBag.Title = "MembersOfProject";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model List<ManageTaskWeb.Models.Member>

<link href="@Url.Content("~/Content/css/membersofproject.css?v=1")" rel="stylesheet" />

<div class="memberofproject-breadcrumb">
    <a href="#">Home</a>
    <span>></span>
    <a href="#">Project</a>
    <span>></span>
    <a href="#">Members of Project</a>
</div>

<div class="memberofproject-content">
    <div class="memberofproject-project-section">
        <div class="memberofproject-project-info">
            <h1>@ViewBag.Project.ProjectName</h1>
            <div class="project-description">
                @if (ViewBag.Project != null)
                {
                    <p>@Html.Raw(ViewBag.Project.Description.Replace("\n", "<br>"))</p>
                }
                else
                {
                    <p>Project information is not available.</p>
                }
            </div>
        </div>

        <div class="memberofproject-owner-status">
            <div class="memberofproject-owner-info">
                <img src="~/Content/images/member-img/@ViewBag.OwnerImage" alt="Owner" />
                <div class="memberofproject-owner-details">
                    <div class="name">@ViewBag.OwnerName (Owner)</div>
                    <div class="date">Create at: @ViewBag.Project.StartDate.ToString("dd/MM/yyyy")</div>
                </div>
            </div>
            <div class="memberofproject-status-section">
                <div class="memberofproject-status-label">Status</div>
                <button class="memberofproject-status-button @(ViewBag.Project.Status == "Completed" ? "status-completed" : 
                                                             ViewBag.Project.Status == "On Hold" ? "status-onhold" : 
                                                             "status-pending")">@ViewBag.Project.Status</button>
            </div>
        </div>
    </div>

    <div class="memberofproject-toolbar">
        <!-- Nút thêm thành viên -->
        <button class="memberofproject-add-member-btn" id="addmember">
            <span>+</span> Thêm Thành Viên Mới
        </button>

 
        <style>
        .memberofproject-add-member-btn{
            border: 1px solid #32bb42;
        }
        .memberofproject-add-member-btn:hover{
            background-color: #a9dba0;
        }
            /* Button chứa văn bản và chấm đỏ */
            .request-icon-wrapper {
                position: relative;
                display: flex;
                align-items: center;
                justify-content: center; /* Văn bản nằm giữa */
                background-color: #f9f9f9;
                border: 1px solid #e50000;
                border-radius: 5px;
                padding: 10px 50px;
                cursor: pointer;
                transition: background-color 0.3s ease, border-color 0.3s ease;
                gap: 10px; /* Khoảng cách giữa các phần tử */
            }

                /* Văn bản trong nút */
                .request-icon-wrapper .button-text {
                    font-size: 14px;
                    font-weight: 700;
                    color: #333;
                }

                /* Chấm đỏ nằm bên phải */
                .request-icon-wrapper .notification-dot {
                    position: absolute;
                    top: 50%; /* Căn giữa theo chiều dọc */
                    right: 10px; /* Cách mép phải 10px */
                    transform: translateY(-50%); /* Đảm bảo căn giữa hoàn hảo */
                    width: 10px;
                    height: 10px;
                    background-color: red;
                    border-radius: 50%;
                    border: 2px solid white; /* Viền trắng bao quanh chấm đỏ */
                }

                /* Hiệu ứng hover */
                .request-icon-wrapper:hover {
                    background-color: #fb6161;
                    border-color: #999;
                }
        </style>
        <!-- Biểu tượng giống hình ảnh -->
        <button class="request-icon-wrapper" id="request-button">
            <span class="button-text" onclick="toggleRequest()">Request </span> &nbsp;
            <span class="notification-dot"></span>
        </button>
    </div>

    <div class="memberofproject-members-container">
        <div class="memberofproject-member-list">
            <table>
                <thead>
                    <tr>
                        <th style="font-weight:bold">Staff</th>
                        <th style="font-weight:bold">Hire Date</th>
                        <th style="font-weight:bold">Status</th>
                        <th style="font-weight:bold">Role</th>
                    </tr>
                </thead>
            </table>
            <div class="table-scroll">
                <table>
                    <tbody>
                        @foreach (var member in Model)
                        {
                            <tr class="member-row"
                                data-name="@member.FullName"
                                data-email="@member.Email"
                                data-phone="@member.Phone"
                                data-role="@member.Role"
                                data-status="@member.Status"
                                
                                data-hiredate="@(member.HireDate.HasValue ? member.HireDate.Value.ToString("dd/MM/yyyy") : "No date available")"
>

                                <td>
                                    <div class="memberofproject-member-info">
                                        <img src="~/Content/images/member-img/@member.ImageMember" alt="Staff" />
                                        <span>@member.FullName</span>
                                    </div>
                                </td>
                                <td>@(member.HireDate.HasValue ? member.HireDate.Value.ToString("dd/MM/yyyy") : "No date available")</td>
                                <td>
                                    <span class="memberofproject-status-badge @(member.Status == "Active" ? "status-online" : "status-inactive")">
                                        @member.Status
                                    </span>
                                </td>
                                <td>
    <span class="memberofproject-status-badge @(member.Role == "Admin" ? "status-admin" : 
                                               member.Role == "Manager" ? "status-online" : 
                                               "status-hr")">
        @member.Role
    </span>
</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>


        <div class="memberofproject-member-details" id="memberDetails">

            <div class="memberofproject-detail-row">
                <span class="memberofproject-detail-label">FullName:</span>
                <span id="memberName">--</span>
            </div>
            <div class="memberofproject-detail-row">
                <span class="memberofproject-detail-label">Email:</span>
                <span id="memberEmail">--</span>
            </div>
            <div class="memberofproject-detail-row">
                <span class="memberofproject-detail-label">Phone:</span>
                <span id="memberPhone">--</span>
            </div>
            <div class="memberofproject-detail-row">
                <span class="memberofproject-detail-label">HireDate:</span>
                <span id="memberHireDate">--</span>
            </div>
            <div class="memberofproject-detail-row">
                <span class="memberofproject-detail-label">Role:</span>
                <span id="memberRole">--</span>
            </div>
            <div class="memberofproject-detail-row">
                <span class="memberofproject-detail-label">Status:</span>
                <span id="memberStatus">--</span>
            </div>
        </div>
    </div>
</div>
<div class="overlay" id="overlay">
    <div class="blind-container-1">
        <h2>Add Members To Project</h2>
        <div class="close-button">✕</div>
        <div class="member-section">
            <!-- Members List -->
            <div class="panel">
                <h3>Members</h3>
                <div class="search-bar">
                    <input type="text" id="searchNonMembers" placeholder="Search Name Members...">
                    <button onclick="searchNonMembers()">🔍</button>
                    
                </div>
                <ul class="member-list" id="nonMembersList">
                    <!-- Data will be loaded here dynamically -->
                </ul>
                <div class="pagination" id="nonMembersPagination">
                    <!-- Pagination will be updated dynamically -->
                </div>
            </div>

            <!-- Members In Project -->
            <div class="panel">
                <h3>Members In Project</h3>
                <div class="search-bar">
                    <input type="text" id="searchProjectMembers" placeholder="Search Name Members...">
                    <button onclick="searchProjectMembers()">🔍</button>
                    
                </div>
                <ul class="member-list" id="projectMembersList">
                    <!-- Data will be loaded here dynamically -->
                </ul>
                <div class="pagination" id="projectMembersPagination">
                    <!-- Pagination will be updated dynamically -->
                </div>
            </div>
        </div>
    </div>
</div>


<div class="overlay-2" id="overlay-2">
    <div class="container-blind-2">
        <h2>Request <span class="icon">📄</span></h2>
        <div class="close-button">✕</div>
        <ul class="request-list">
            <li>
              
            </li>
        </ul>
        
    </div>
</div>

<style>

.status-admin {
    background-color: #f09d9d !important; /* Màu đỏ cho Admin */
}

.status-online {
    background-color: #94e297 !important; /* Màu xanh cho Manager */
}

    .status-hr {
        background-color: #8fd9fa !important; /* Màu xám cho các role khác */
    }

.status-inactive {
    background-color: #c7c7c7 !important; /* Màu xám cho các role khác */
}

    .pagination {
        display: flex;
        gap: 5px;
        justify-content: center;
        margin-top: 10px;
    }

    .pagination button {
        padding: 5px 10px;
        border: 1px solid #ddd;
        background: white;
        cursor: pointer;
        border-radius: 3px;
    }

    .pagination button.active {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }

    .pagination button:disabled {
        background: #f5f5f5;
        cursor: not-allowed;
    }

    .pagination button:hover:not(:disabled) {
        background: #e9ecef;
    }

    .memberofproject-member-list {
        max-height: 400px; /* Chiều cao tối đa cho container */
    }

    .table-scroll {
        max-height: 320px; /* Chiều cao cho phần tbody có thể cuộn */
        overflow-y: auto;
    }

    .memberofproject-member-list table {
        width: 100%;
        border-collapse: collapse;
    }

    /* Giữ header cố định */
    .memberofproject-member-list thead {
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 1;
    }

    /* Tùy chỉnh thanh cuộn */
    .table-scroll::-webkit-scrollbar {
        width: 8px;
    }

    .table-scroll::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .table-scroll::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    .table-scroll::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    /* Add these styles */
    .request-list {
        max-height: 400px;
        overflow-y: auto;
        padding: 10px;
    }

    /* Customize scrollbar */
    .request-list::-webkit-scrollbar {
        width: 8px;
    }

    .request-list::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .request-list::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    .request-list::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    .member-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 10px;
    }

    /* Xóa styles cũ cho .avatar và .avatar-green vì không cần thiết nữa */
    .avatar, .avatar-green, .avatar-yellow {
        display: none;
    }

    /* Điều chỉnh layout cho list items */
    .member-list li {
        display: flex;
        align-items: center;
        padding: 10px;
    }

    .request-list li {
        display: flex;
        align-items: center;
        padding: 10px;
    }

    .memberofproject-status-button {
        padding: 5px 15px;
        border-radius: 4px;
        border: none;
        color: white;
        font-weight: bold;
    }

    .status-completed {
        background-color: #4CAF50; /* Màu xanh lá cho Completed */
    }

    .status-pending {
        background-color: #FFC107; /* Màu vàng cho Pending và In Progress */
    }

    .status-onhold {
        background-color: #2196F3; /* Màu xanh dương cho On Hold */
    }
</style>
<script>
    function toggleRequest() {
    var overlay = document.getElementById('overlay-2');
    var requestList = document.querySelector('.request-list');
    overlay.style.visibility = 'visible';

    var projectId = '@ViewBag.ProjectId'; // Get ProjectID from ViewBag
    fetch(`/Home/GetJoinRequests?projectId=${projectId}`)
        .then(response => response.json())
        .then(data => {
            requestList.innerHTML = ''; // Clear previous requests

            if (data.length === 0) {
                // No requests
                var li = document.createElement('li');
                li.classList.add('no-requests');
                li.innerHTML = `<p>No join requests</p>`;
                requestList.appendChild(li);
            } else {
                // Create new request list
                data.forEach(request => {
                    var li = document.createElement('li');
                    li.classList.add('notification');
                    li.setAttribute('data-id', request.NotificationIDs[0]);

                    li.innerHTML = `
                        <img src="/Content/images/member-img/${request.ImageMember}" alt="${request.FullName}" class="member-avatar"/>
                        <div class="info">
                            <p>${request.FullName}</p>
                            <span class="role">${request.Role}</span>
                        </div>
                        <button class="accept-button" data-notificationid="${request.NotificationIDs[0]}">✔ Accept</button>
                        <button class="reject-button" data-notificationid="${request.NotificationIDs[0]}">✖ Reject</button>
                    `;
                    requestList.appendChild(li);
                });

                // Add event listeners for new buttons
                document.querySelectorAll('.accept-button').forEach(button => {
                    button.addEventListener('click', function () {
                        var notificationId = this.getAttribute('data-notificationid');
                        acceptProjectRequest(notificationId);
                    });
                });

                document.querySelectorAll('.reject-button').forEach(button => {
                    button.addEventListener('click', function () {
                        var notificationId = this.getAttribute('data-notificationid');
                        rejectProjectRequest(notificationId);
                    });
                });
            }
        })
        .catch(error => console.error('Error fetching join requests:', error));
}
    function acceptProjectRequest(notificationId) {
        fetch(`/Home/AcceptJoinRequest?notificationId=${notificationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
            .then(response => response.json())
            .then(data => {
                alert(data.message); // Display the server message
                if (data.success) {
                    toggleRequest(); // Reload the request list after accepting
                }
            })
            .catch(error => {
                console.error('Error accepting join request:', error);
                alert('There was an error while processing your request: ' + error.message); // Display error message
            });
    }
    function rejectProjectRequest(notificationId) {
        const notificationElement = document.querySelector(`.notification[data-id="${notificationId}"]`);
        if (!notificationElement) return;

        // Check if input already exists
        if (notificationElement.querySelector('.reject-reason')) return;

        // Hide accept and reject buttons
        const acceptButton = notificationElement.querySelector('.accept-button');
        const rejectButton = notificationElement.querySelector('.reject-button');
        acceptButton.style.display = 'none';
        rejectButton.style.display = 'none';

        // Create container for new elements
        const inputContainer = document.createElement('div');
        inputContainer.classList.add('reject-input-container');

        // Create input field
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = 'Enter reject reason...';
        input.classList.add('reject-reason', 'form-control', 'mt-2');

        // Create buttons container
        const buttonsContainer = document.createElement('div');
        buttonsContainer.classList.add('buttons-container', 'mt-2');
        buttonsContainer.style.display = 'flex';
        buttonsContainer.style.gap = '10px';

        // Create confirm button
        const confirmButton = document.createElement('button');
        confirmButton.textContent = 'Confirm';
        confirmButton.classList.add('btn', 'btn-primary');

        // Create cancel button
        const cancelButton = document.createElement('button');
        cancelButton.textContent = 'Cancel';
        cancelButton.classList.add('btn', 'btn-secondary');

        // Add cancel button functionality
        cancelButton.addEventListener('click', function() {
            inputContainer.remove();
            acceptButton.style.display = '';
            rejectButton.style.display = '';
        });

        // Add confirm button functionality
        confirmButton.addEventListener('click', function() {
            const reason = input.value.trim();
            if (!reason) {
                alert('Please enter a reason.');
                return;
            }

            fetch(`/Home/RejectJoinRequest`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    notificationId: notificationId,
                    reason: reason
                })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                if (data.success) {
                    toggleRequest();
                }
            })
            .catch(error => {
                console.error('Error rejecting join request:', error);
                alert('There was an error while rejecting your request.');
            });
        });

        // Assemble and append elements
        buttonsContainer.appendChild(confirmButton);
        buttonsContainer.appendChild(cancelButton);
        inputContainer.appendChild(input);
        inputContainer.appendChild(buttonsContainer);
        notificationElement.appendChild(inputContainer);
    }

        document.getElementById('addmember').addEventListener('click', function () {
        var overlay = document.getElementById('overlay');
        overlay.style.visibility = 'visible'; // Hiển thị overlay
        loadMembers(); // Load data when opening popup
    });
    document.querySelectorAll('.close-button').forEach(function (closeButton) {
        closeButton.addEventListener('click', function () {
            // Check if it's for the first or second overlay
            var overlay2 = document.getElementById('overlay-2');
            var overlay = document.getElementById('overlay');
            if (closeButton.closest('.container-blind-2')) {
                overlay2.style.visibility = 'hidden'; // Hide the second overlay
            } else if (closeButton.closest('.blind-container-1')) {
                overlay.style.visibility = 'hidden'; // Hide the first overlay
            }
        });
    });

    document.querySelectorAll('.member-row').forEach(row => {
        row.addEventListener('mouseover', function () {
            // Lấy dữ liệu từ các thuộc tính data
            const name = this.dataset.name;
            const email = this.dataset.email;
            const phone = this.dataset.phone;
            const role = this.dataset.role;
            const status = this.dataset.status;
            const hireDate = this.dataset.hiredate; // Lấy dữ liệu HireDate

            // Cập nhật nội dung vào khu vực chi tiết
            document.getElementById('memberName').textContent = name;
            document.getElementById('memberEmail').textContent = email;
            document.getElementById('memberPhone').textContent = phone;
            document.getElementById('memberRole').textContent = role;
            document.getElementById('memberStatus').textContent = status;
            document.getElementById('memberHireDate').textContent = hireDate ? hireDate : "No date available"; // Hiển thị HireDate

        });
    });

    function loadMembers() {
        var projectId = '@ViewBag.ProjectId';
        const itemsPerPage = 3; // Số item trên mỗi trang
        let currentNonMembersPage = 1;
        let currentProjectMembersPage = 1;

        // Load non-members
        fetch(`/Home/GetNonProjectMembers?projectId=${projectId}`)
            .then(response => response.json())
            .then(data => {
                const nonMembersList = document.getElementById('nonMembersList');
                const nonMembersPagination = document.getElementById('nonMembersPagination');
                
                function displayNonMembers(page) {
                    nonMembersList.innerHTML = '';
                    const start = (page - 1) * itemsPerPage;
                    const end = start + itemsPerPage;
                    const paginatedItems = data.slice(start, end);

                    paginatedItems.forEach(member => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <img src="/Content/images/member-img/${member.ImageMember}" alt="${member.FullName}" class="member-avatar"/>
                            <div class="info">
                                <p>${member.MemberId}</p>
                                <p>${member.FullName}</p>
                                <span class="role">${member.Role}</span>
                            </div>
                            <button class="add-button" onclick="addMemberToProject('${member.MemberId}')">➕</button>
                        `;
                        nonMembersList.appendChild(li);
                    });

                    // Cập nhật phân trang
                    const totalPages = Math.ceil(data.length / itemsPerPage);
                    updatePagination(nonMembersPagination, totalPages, currentNonMembersPage, (newPage) => {
                        currentNonMembersPage = newPage;
                        displayNonMembers(newPage);
                    });
                }

                displayNonMembers(1);
            });

        // Load project members
        fetch(`/Home/GetProjectMembers?projectId=${projectId}`)
            .then(response => response.json())
            .then(data => {
                const projectMembersList = document.getElementById('projectMembersList');
                const projectMembersPagination = document.getElementById('projectMembersPagination');

                function displayProjectMembers(page) {
                    projectMembersList.innerHTML = '';
                    const start = (page - 1) * itemsPerPage;
                    const end = start + itemsPerPage;
                    const paginatedItems = data.slice(start, end);

                    paginatedItems.forEach(member => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <img src="/Content/images/member-img/${member.ImageMember}" alt="${member.FullName}" class="member-avatar"/>
                            <div class="info">
                                <p>${member.MemberId}</p>
                                <p>${member.FullName}</p>
                                <span class="role ${member.Role.toLowerCase()}">${member.Role}</span>
                            </div>
                            <button class="remove-button" onclick="removeMemberFromProject('${member.MemberId}')">
                                <i class="fa-regular fa-trash-can" style="color:red;"></i>
                            </button>
                        `;
                        projectMembersList.appendChild(li);
                    });

                    // Cập nhật phân trang
                    const totalPages = Math.ceil(data.length / itemsPerPage);
                    updatePagination(projectMembersPagination, totalPages, currentProjectMembersPage, (newPage) => {
                        currentProjectMembersPage = newPage;
                        displayProjectMembers(newPage);
                    });
                }

                displayProjectMembers(1);
            });
    }

    function updatePagination(paginationElement, totalPages, currentPage, callback) {
        paginationElement.innerHTML = '';
        
        if (totalPages <= 1) return; // Không hiện phân trang nếu chỉ có 1 trang

        // Nút Previous
        const prevButton = document.createElement('button');
        prevButton.innerHTML = '◀';
        prevButton.disabled = currentPage === 1;
        prevButton.onclick = () => callback(currentPage - 1);
        paginationElement.appendChild(prevButton);

        // Các nút số trang
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.innerHTML = i;
            pageButton.classList.toggle('active', i === currentPage);
            pageButton.onclick = () => callback(i);
            paginationElement.appendChild(pageButton);
        }

        // Nút Next
        const nextButton = document.createElement('button');
        nextButton.innerHTML = '▶';
        nextButton.disabled = currentPage === totalPages;
        nextButton.onclick = () => callback(currentPage + 1);
        paginationElement.appendChild(nextButton);
    }

            function addMemberToProject(memberId) {
            console.log("Adding MemberID: ", memberId); // Debug
            var projectId = '@ViewBag.ProjectId';
            fetch('/Home/AddMemberToProject', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    projectId: projectId,
                    memberId: memberId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadMembers(); // Reload both lists
                    alert('Member added successfully');
                } else {
                    alert(data.message);
                }
            });
        }


    function removeMemberFromProject(memberId) {
        var projectId = '@ViewBag.ProjectId';
        fetch('/Home/RemoveMemberFromProject', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                projectId: projectId,
                memberId: memberId
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                loadMembers(); // Reload both lists
                alert('Member removed successfully');
            } else {
                alert(data.message);
            }
        });
    }

    function searchNonMembers() {
        const searchText = document.getElementById('searchNonMembers').value.toLowerCase();
        const nonMembersList = document.getElementById('nonMembersList');
        const listItems = nonMembersList.getElementsByTagName('li');

        Array.from(listItems).forEach(item => {
            const memberName = item.querySelector('.info p:nth-child(2)').textContent.toLowerCase();
            const memberId = item.querySelector('.info p:nth-child(1)').textContent.toLowerCase();
            
            if (memberName.includes(searchText) || memberId.includes(searchText)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }

    function searchProjectMembers() {
        const searchText = document.getElementById('searchProjectMembers').value.toLowerCase();
        const projectMembersList = document.getElementById('projectMembersList');
        const listItems = projectMembersList.getElementsByTagName('li');

        Array.from(listItems).forEach(item => {
            const memberName = item.querySelector('.info p:nth-child(2)').textContent.toLowerCase();
            const memberId = item.querySelector('.info p:nth-child(1)').textContent.toLowerCase();
            
            if (memberName.includes(searchText) || memberId.includes(searchText)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Thêm event listener cho input để tìm kiếm khi gõ
    document.getElementById('searchNonMembers').addEventListener('input', searchNonMembers);
    document.getElementById('searchProjectMembers').addEventListener('input', searchProjectMembers);
</script>


