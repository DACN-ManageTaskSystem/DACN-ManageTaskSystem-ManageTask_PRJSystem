@{
    ViewBag.Title = "Báo cáo - Thống kê";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="@Url.Content("~/Content/css/bctk.css?v=1")" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
<div class="container-fluid mt-4">
    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="fas fa-filter"></i> Bộ lọc báo cáo</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Dự án</label>
                        <select class="form-control" id="projectFilter">
                            <option value="">Tất cả dự án</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Thành viên</label>
                        <select class="form-control" id="memberFilter">
                            <option value="">Tất cả thành viên</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>Khoảng thời gian</label>
                        <div class="input-group">
                            <input type="date" class="form-control" id="startDate">
                            <div class="input-group-prepend input-group-append">
                                <span class="input-group-text">đến</span>
                            </div>
                            <input type="date" class="form-control" id="endDate">
                        </div>
                    </div>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button class="btn btn-primary btn-block" id="filterBtn">
                        <i class="fas fa-search"></i> Lọc
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Dashboard Stats -->
    <div class="row">
        <div class="col-md-3">
            <div class="card bg-info text-white mb-4">
                <div class="card-body">
                    <h5>Tổng số dự án</h5>
                    <h2 class="mb-0" id="totalProjects">0</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white mb-4">
                <div class="card-body">
                    <h5>Công việc hoàn thành</h5>
                    <h2 class="mb-0" id="completedTasks">0</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white mb-4">
                <div class="card-body">
                    <h5>Công việc đang thực hiện</h5>
                    <h2 class="mb-0" id="inProgressTasks">0</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white mb-4" onmouseover="loadOverdueTasks()" onmouseout="hideOverdueTasks()">
                <div class="card-body">
                    <h5>Công việc trễ hạn</h5>
                    <h2 class="mb-0" id="overdueTasks">0</h2>
                    <div id="overdueTasksList" style="display: none; position: absolute; background: white; color: black; z-index: 1000; border: 1px solid #ccc; padding: 10px;">
                        <h6>Công việc trễ hạn:</h6>
                        <ul id="overdueTasksItems"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Detailed Reports -->
    <div class="card" style="margin-bottom: 30px;">
        <div class="card-header header-detailed-report d-flex justify-content-between align-items-center cursor-pointer" onclick="toggleChart('detailedReport')">
            <h5 class="mb-0">Chi tiết báo cáo</h5>
            <div>
                <button class="btn btn-success" id="exportExcel">
                    <i class="fas fa-file-excel"></i> Xuất Excel
                </button>
                <button class="btn btn-danger" id="exportPdf">
                    <i class="fas fa-file-pdf"></i> Xuất PDF
                </button>
            </div>
        </div>
        <div class="card-body" id="detailedReportBody" style="display: none;">
            <div class="table-responsive">
                <table class="table table-bordered table-hover" id="reportTable">
                    <thead class="thead-light">
                        <tr>
                            <th>Dự án</th>
                            <th>Công việc</th>
                            <th>Người thực hiện</th>
                            <th>Trạng thái</th>
                            <th>Ngày bắt đầu</th>
                            <th>Ngày kết thúc</th>
                            <th>Tiến độ</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be populated dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <!-- Charts Section -->
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-header header-project-progress cursor-pointer" onclick="toggleChart('projectProgress')">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Tiến độ dự án</h5>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
                <div class="card-body chart-body chart-container" id="projectProgressBody" style="display: none;">
                    <canvas id="projectProgress"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header header-task-distribution cursor-pointer" onclick="toggleChart('taskDistribution')">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Phân bổ công việc theo thành viên</h5>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <select class="form-control" id="taskDistProjectFilter">
                            <option value="">Tất cả dự án</option>
                        </select>
                    </div>
                    <div class="chart-body chart-container" id="taskDistributionBody" style="display: none;">
                        <canvas id="taskDistribution"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header header-task-distribution-by-assigner cursor-pointer" onclick="toggleChart('taskDistributionByAssigner')">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Phân bổ công việc theo người giao</h5>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <select class="form-control" id="taskDistByAssignerProjectFilter">
                            <option value="">Tất cả dự án</option>
                        </select>
                    </div>
                    <div class="chart-body chart-container" id="taskDistributionByAssignerBody" style="display: none;">
                        <canvas id="taskDistributionByAssigner"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    
</div>


    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let projectProgressChart;
let taskDistributionChart;
let taskDistributionByAssignerChart;
let isLoading = false;

$(document).ready(function() {
    // Load filter options
    loadFilterOptions();
    
    // Populate project dropdowns
    $.get('/Home/GetFilterOptions', function(response) {
        if (response.success) {
            let projectOptions = '<option value="">Tất cả dự án</option>';
            response.projects.forEach(function(project) {
                projectOptions += `<option value="${project.ProjectID}">${project.ProjectName}</option>`;
            });
            $('#taskDistProjectFilter, #taskDistByAssignerProjectFilter').html(projectOptions);
        }
    });

    // Bind change events for project filters
    $('#taskDistProjectFilter').change(function() {
        updateTaskDistributionChart($(this).val());
    });

    $('#taskDistByAssignerProjectFilter').change(function() {
        updateTaskDistributionByAssignerChart($(this).val());
    });

    // Initial load of report data
    loadReportData();

    // Bind filter button click
    $('#filterBtn').click(function() {
        loadReportData();
    });

    // Bind export buttons
    $('#exportExcel').click(exportToExcel);
    $('#exportPdf').click(exportToPDF);
});

function loadFilterOptions() {
    $.get('/Home/GetFilterOptions', function(response) {
        if (response.success) {
            // Populate project dropdown
            let projectSelect = $('#projectFilter');
            response.projects.forEach(function(project) {
                projectSelect.append(new Option(project.ProjectName, project.ProjectID));
            });

            // Populate member dropdown
            let memberSelect = $('#memberFilter');
            response.members.forEach(function(member) {
                memberSelect.append(new Option(member.FullName, member.MemberID));
            });
        }
    });
}

function showLoading() {
    isLoading = true;
    // Thêm loading spinner hoặc disable các nút
    $('#filterBtn').prop('disabled', true);
    $('#filterBtn').html('<i class="fas fa-spinner fa-spin"></i> Đang tải...');
}

function hideLoading() {
    isLoading = false;
    // Ẩn loading spinner
    $('#filterBtn').prop('disabled', false);
    $('#filterBtn').html('<i class="fas fa-search"></i> Lọc');
}

function loadReportData() {
    if (isLoading) return;
    
    showLoading();
    const filters = {
        projectId: $('#projectFilter').val(),
        memberId: $('#memberFilter').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val()
    };

    // Validate date range
    if (filters.startDate && filters.endDate) {
        if (new Date(filters.startDate) > new Date(filters.endDate)) {
            alert('Ngày bắt đầu không thể lớn hơn ngày kết thúc');
            hideLoading();
            return;
        }
    }

    $.get('/Home/GetReportData', filters)
        .done(function(response) {
            if (response.success) {
                updateDashboardStats(response);
                updateCharts(response);
                updateDetailedReport(response);
            } else {
                alert('Lỗi: ' + response.message);
            }
        })
        .fail(function(error) {
            console.error('Error loading report data:', error);
            alert('Không thể tải dữ liệu báo cáo. Vui lòng thử lại sau.');
        })
        .always(function() {
            hideLoading();
        });
}

function updateDashboardStats(data) {
    $('#totalProjects').text(data.totalProjects);
    $('#completedTasks').text(data.completedTasks);
    $('#inProgressTasks').text(data.inProgressTasks);
    $('#overdueTasks').text(data.overdueTasks);
}

function updateCharts(data) {
    // Update Project Progress Chart
    if (projectProgressChart) {
        projectProgressChart.destroy();
    }
    
    const projectCtx = document.getElementById('projectProgress').getContext('2d');
    projectProgressChart = new Chart(projectCtx, {
        type: 'bar',
        data: {
            labels: data.projectProgress.map(p => p.projectName),
            datasets: [{
                label: 'Completed Tasks',
                data: data.projectProgress.map(p => p.completedTasks),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }, {
                label: 'Total Tasks',
                data: data.projectProgress.map(p => p.totalTasks),
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Update Task Distribution Chart
    if (taskDistributionChart) {
        taskDistributionChart.destroy();
    }

    const taskCtx = document.getElementById('taskDistribution').getContext('2d');
    taskDistributionChart = new Chart(taskCtx, {
        type: 'pie',
        data: {
            labels: data.taskDistribution.map(t => t.memberName),
            datasets: [{
                data: data.taskDistribution.map(t => t.taskCount),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        }
    });

    // Update Task Distribution By Assigner Chart
    if (taskDistributionByAssignerChart) {
        taskDistributionByAssignerChart.destroy();
    }

    const assignerCtx = document.getElementById('taskDistributionByAssigner').getContext('2d');
    taskDistributionByAssignerChart = new Chart(assignerCtx, {
        type: 'doughnut',  // Sử dụng kiểu doughnut để khác biệt với biểu đồ taskDistribution
        data: {
            labels: data.taskDistributionByAssigner.map(t => t.memberName),
            datasets: [{
                data: data.taskDistributionByAssigner.map(t => t.taskCount),
                backgroundColor: [
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(201, 203, 207, 0.2)',
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 159, 64, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(201, 203, 207, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                title: {
                    display: true,
                    text: 'Số lượng task đã giao'
                },
                legend: {
                    position: 'bottom'
                }
            }
        }
    });
}

function updateDetailedReport(data) {
    const tbody = $('#reportTable tbody');
    tbody.empty();
    
    let currentProjectId = null;
    let currentTaskId = null;
    
    data.detailedReport.forEach(function (item) {   
        // Xác định loại task và class tương ứng
        const isMainTask = item.parentTaskId === null;
        const rowClass = isMainTask ? 'main-task' : 'sub-task';

        // Kiểm tra điều kiện để tô màu đỏ nhạt
        const currentDate = new Date();

        // Tách chuỗi dd/MM/yyyy để tạo Date object
        const endDateParts = formatDate(item.endDate).split('/');
        const taskEndDate = new Date(
            parseInt(endDateParts[2]), // Năm
            parseInt(endDateParts[1]) - 1, // Tháng (bắt đầu từ 0)
            parseInt(endDateParts[0]) // Ngày
        );

        const isOverdueAndPending = taskEndDate < currentDate && item.status === 'Pending';

        console.log(formatDate(item.endDate)); // Chuỗi ngày đã định dạng
        console.log(currentDate); // Ngày hiện tại
        console.log(taskEndDate); // Ngày kết thúc dạng Date object
        console.log(isOverdueAndPending); // Kết quả kiểm tra

        // Tạo progress bar
        const progressColor = getProgressColor(item.progress);
        const progressBar = `
            <div class="progress">
                <div class="progress-bar" role="progressbar" 
                     style="width: ${item.progress}%; background-color: ${progressColor}"
                     aria-valuenow="${item.progress}" aria-valuemin="0" aria-valuemax="100">
                    <span class="progress-text">${Math.round(item.progress)}%</span>
                </div>
            </div>`;

        // Nếu là project mới, thêm dòng phân cách
        if (currentProjectId !== null && currentProjectId !== item.projectId) {
            tbody.append('<tr><td colspan="7" style="height: 10px; background-color: #dee2e6;"></td></tr>');
        }
        
        // Tạo dòng HTML với điều kiện tô màu
        const rowStyle = isOverdueAndPending ? 'style="background-color: #ffc4c4;"' : '';
        const row = `
            <tr class="${rowClass}" ${rowStyle}>
                <td>${item.projectName}</td>
                <td>${item.taskName}</td>
                <td>${item.assignedTo}</td>
                <td>${getStatusBadge(item.status)}</td>
                <td>${formatDate(item.startDate)}</td>
                <td>${formatDate(item.endDate)}</td>
                <td>${progressBar}</td>
            </tr>`;
            
        tbody.append(row);
        
        currentProjectId = item.projectId;
        if (isMainTask) {
            currentTaskId = item.taskId;
        }
    });
}

function formatDate(dateString) {
    if (!dateString) return 'N/A';
    
    try {
        
        
        // Nếu dateString có dạng "/Date(1234567890)/"
        if (typeof dateString === 'string' && dateString.includes('/Date(')) {
            const timestamp = parseInt(dateString.replace(/[^0-9]/g, ''));
            const date = new Date(timestamp);
            if (!isNaN(date.getTime())) {
                return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
            }
        }
        
        // Xử lý chuỗi dạng "{1/21/2024 12:00:00 AM}"
        let cleanDateString = dateString;
        if (typeof dateString === 'string') {
            cleanDateString = dateString.replace(/[{}]/g, '').split(' ')[0];
        }
        
        
        const dateParts = cleanDateString.split('/');
        if (dateParts.length === 3) {
            // Assuming format is M/D/YYYY
            const month = parseInt(dateParts[0]);
            const day = parseInt(dateParts[1]);
            const year = parseInt(dateParts[2]);
            
            const date = new Date(year, month - 1, day);
            console.log('Parsed date:', date); // Debug log
            
            if (!isNaN(date.getTime())) {
                return `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
            }
        }
        
        // Thử parse trực tiếp
        const date = new Date(cleanDateString);
        if (!isNaN(date.getTime())) {
            return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
        }
        
        return 'N/A';
    } catch (error) {
        console.error('Error formatting date:', error, 'for dateString:', dateString);
        return 'N/A';
    }
}

async function exportToExcel() {
    try {
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Báo cáo');
        
        // Lấy dữ liệu từ bảng
        const table = document.getElementById('reportTable');
        const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent);
        const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {
            return Array.from(row.querySelectorAll('td')).map(cell => {
                if (cell.querySelector('.progress')) {
                    return cell.querySelector('.progress-bar').textContent.trim();
                }
                return cell.textContent.trim();
            });
        });

        // Thêm header công ty
        worksheet.mergeCells('A1:E1');
        worksheet.mergeCells('F1:G1');
        worksheet.mergeCells('A2:E2');
        worksheet.mergeCells('F2:G2');
        worksheet.mergeCells('A3:E3');
        worksheet.mergeCells('F3:G3');
        
        // Thêm dữ liệu header
        worksheet.getCell('A1').value = 'CÔNG TY TNHH TASKFLOW';
        worksheet.getCell('F1').value = 'CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM';
        worksheet.getCell('A2').value = 'Địa chỉ: Số 140, Đường Lê Trọng Tấn,';
        worksheet.getCell('F2').value = 'Độc lập - Tự do - Hạnh phúc';
        worksheet.getCell('A3').value = 'Phường Tây Thạnh, Quận Tân Phú, Thành phố Hồ Chí Minh';
        worksheet.getCell('F3').value = '-------------------';
        worksheet.getCell('A4').value = 'Liên hệ: 0336262699';

        // Thêm tiêu đề báo cáo
        worksheet.mergeCells('C6:E6');
        worksheet.getCell('C6').value = 'BÁO CÁO CHI TIẾT CÔNG VIỆC';
        worksheet.mergeCells('C7:E7');
        worksheet.getCell('C7').value = `Ngày xuất: ${new Date().toLocaleDateString('vi-VN')}`;

        // Thêm headers bảng
        const headerRow = worksheet.addRow(headers);
        headerRow.eachCell((cell) => {
            cell.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'FFE2EFDA' }
            };
            cell.border = {
                top: { style: 'medium' },
                left: { style: 'medium' },
                bottom: { style: 'medium' },
                right: { style: 'medium' }
            };
            cell.font = { bold: true };
            cell.alignment = { vertical: 'middle', horizontal: 'center' };
        });

        // Thêm dữ liệu và style
        rows.forEach((rowData, index) => {
            const row = worksheet.addRow(rowData);
            const isMainTask = table.rows[index + 1].classList.contains('main-task');
            
            row.eachCell((cell) => {
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
                
                if (isMainTask) {
                    cell.fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: 'FFF2F2F2' }
                    };
                    cell.font = { bold: true };
                }
                
                cell.alignment = { vertical: 'middle' };
            });
        });

        // Điều chỉnh độ rộng cột
        worksheet.columns = [
            { width: 25 }, // Project
            { width: 30 }, // Task
            { width: 20 }, // Assigned To
            { width: 15 }, // Status
            { width: 15 }, // Start Date
            { width: 15 }, // End Date
            { width: 15 }  // Progress
        ];

        // Style cho header công ty
        worksheet.getCell('A1').font = { bold: true, size: 16 };
        worksheet.getCell('F1').font = { bold: true, size: 14 };
        worksheet.getCell('C6').font = { bold: true, size: 16 };
        worksheet.getCell('C6').alignment = { horizontal: 'center' };

        // Xuất file
        const buffer = await workbook.xlsx.writeBuffer();
        const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `BaoCaoCongViec_${new Date().toISOString().split('T')[0]}.xlsx`;
        a.click();
        window.URL.revokeObjectURL(url);
    } catch (error) {
        console.error('Error exporting to Excel:', error);
        alert('Có lỗi xảy ra khi xuất Excel. Vui lòng thử lại sau.');
    }
}

function exportToPDF() {
    const element = document.getElementById('reportTable');
    const opt = {
        margin: 1,
        filename: `BaoCaoCongViec_${new Date().toISOString().split('T')[0]}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'a4', orientation: 'landscape' }
    };
    
    html2pdf().set(opt).from(element).save();
}

function toggleChart(chartId) {
    const bodyElement = document.getElementById(chartId + 'Body');
    const iconElement = bodyElement.parentElement.querySelector('.fa-chevron-down');
    
    if (bodyElement.style.display === 'none') {
        bodyElement.style.display = 'block';
        iconElement.classList.add('rotated');
        
        // Vẽ lại biểu đồ khi hiện ra để đảm bảo hiển thị đúng
        switch(chartId) {
            case 'projectProgress':
                if (projectProgressChart) projectProgressChart.resize();
                break;
            case 'taskDistribution':
                if (taskDistributionChart) taskDistributionChart.resize();
                break;
            case 'taskDistributionByAssigner':
                if (taskDistributionByAssignerChart) taskDistributionByAssignerChart.resize();
                break;
            case 'detailedReport':
                // Có thể thêm logic cập nhật bảng nếu cần
                break;
        }
    } else {
        bodyElement.style.display = 'none';
        iconElement.classList.remove('rotated');
    }
}

function updateTaskDistributionChart(projectId) {
    const filters = {
        projectId: projectId,
        memberId: $('#memberFilter').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val()
    };

    $.get('/Home/GetReportData', filters)
        .done(function(response) {
            if (response.success) {
                if (taskDistributionChart) {
                    taskDistributionChart.destroy();
                }
                const taskCtx = document.getElementById('taskDistribution').getContext('2d');
                taskDistributionChart = new Chart(taskCtx, {
                    type: 'pie',
                    data: {
                        labels: response.taskDistribution.map(t => t.memberName),
                        datasets: [{
                            data: response.taskDistribution.map(t => t.taskCount),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                text: 'Số lượng công việc của mỗi thành viên'
                            },
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }
        });
}

function updateTaskDistributionByAssignerChart(projectId) {
    const filters = {
        projectId: projectId,
        memberId: $('#memberFilter').val(),
        startDate: $('#startDate').val(),
        endDate: $('#endDate').val()
    };

    $.get('/Home/GetReportData', filters)
        .done(function(response) {
            if (response.success) {
                // Cập nhật biểu đồ phân bổ công việc theo người giao
                if (taskDistributionByAssignerChart) {
                    taskDistributionByAssignerChart.destroy();
                }
                const assignerCtx = document.getElementById('taskDistributionByAssigner').getContext('2d');
                taskDistributionByAssignerChart = new Chart(assignerCtx, {
                    type: 'doughnut',
                    data: {
                        labels: response.taskDistributionByAssigner.map(t => t.memberName),
                        datasets: [{
                            data: response.taskDistributionByAssigner.map(t => t.taskCount),
                            backgroundColor: [
                                'rgba(255, 159, 64, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(201, 203, 207, 0.2)',
                                'rgba(255, 99, 132, 0.2)'
                            ],
                            borderColor: [
                                'rgba(255, 159, 64, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(201, 203, 207, 1)',
                                'rgba(255, 99, 132, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                text: 'Số lượng task đã giao'
                            },
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }
        });
}

function getProgressColor(progress) {
    if (progress < 25) return '#dc3545';  // Đỏ
    if (progress < 50) return '#ffc107';  // Vàng
    if (progress < 75) return '#17a2b8';  // Xanh dương
    return '#28a745';                     // Xanh lá
}

function getStatusBadge(status) {
    const statusMap = {
        'Pending': { color: 'warning', text: 'Chưa bắt đầu' },
        'In Progress': { color: 'primary', text: 'Đang thực hiện' },
        'Completed': { color: 'success', text: 'Hoàn thành' },
        'Overdue': { color: 'danger', text: 'Trễ hạn' }
    };
    
    const statusInfo = statusMap[status] || { color: 'secondary', text: status };
    return `<span class="badge bg-${statusInfo.color}">${statusInfo.text}</span>`;
}

function loadOverdueTasks() {
    $.get('/Home/GetOverdueTasks', function(response) {
        if (response.success) {
            const overdueTasksItems = $('#overdueTasksItems');
            overdueTasksItems.empty();
            response.tasks.forEach(function(task) {
                overdueTasksItems.append(`<li>${task.projectName} ${task.taskDes} - ${formatDate(task.dueDate)}</li>`);
            });
            $('#overdueTasksList').show(); // Hiện danh sách khi hover
        } else {
            alert('Không thể tải danh sách công việc trễ hạn.');
        }
    });
}

function hideOverdueTasks() {
    $('#overdueTasksList').hide(); // Ẩn danh sách khi không hover
}
</script>

<!-- Add required libraries for export -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>

<style>
.progress {
    background-color: #f8f9fa;
    box-shadow: inset 0 1px 3px rgba(0,0,0,.2);
}

.progress-bar {
    transition: width .6s ease;
}

.progress-text {
    color: white;
    font-weight: bold;
    text-shadow: 1px 1px 1px rgba(0,0,0,.4);
}

.badge {
    
    padding: 5px 10px;
    font-size: 0.9em;
}

.main-task {
    background-color: #f8f9fa;  /* Màu xám nhạt cho task chính */
    font-weight: bold;
}

.sub-task {
    background-color: #ffffff;  /* Màu trắng cho subtask */
    padding-left: 30px;  /* Thụt lề cho subtask */
}

.sub-task td:first-child {
    position: relative;
}

.sub-task td:first-child:before {
    position: absolute;
    left: 10px;
    color: #6c757d;
}
</style>
