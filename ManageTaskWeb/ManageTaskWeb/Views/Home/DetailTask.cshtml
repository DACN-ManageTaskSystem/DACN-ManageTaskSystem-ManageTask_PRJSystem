@model ManageTaskWeb.Models.TaskViewModel
@{
    ViewBag.Title = "DetailTask";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Comfortaa', sans-serif;
        background-color: #f7f7f7;
    }

    .breadcrumb {
        font-size: 20px;
        color: #888;
        margin: 20px 30px;
        width: 100%;
        font-weight: bold;
        padding-left: 100px;
    }

    .title {
        font-size: 22px;
        color: #d90000;
        font-weight: bold;
        margin-bottom: 15px;
        line-height: 1.2;
    }

    .task-info {
        font-size: 14px;
        color: #333;
        line-height: 1.6;
        margin-bottom: 20px;
    }

    .attachment-section {
        display: flex;
        align-items: center;
        margin: 20px 0;
    }

    .attachment-icon {
        width: 60px;
        height: 60px;
        margin-right: 10px;
    }

    .attachment-details {
        font-size: 14px;
        color: #333;
    }

    .progress-bar {
        width: 100%;
        background-color: #ddd;
        border-radius: 5px;
        overflow: hidden;
        margin: 15px 0;
    }

        .progress-bar .progress {
            height: 12px;
            background-color: #4caf50;
            width: 50%;
        }

    .status {
        font-size: 16px;
        margin: 20px 0;
        display: flex;
        align-items: center;
    }

        .status span {
            font-weight: bold;
           
            padding: 5px 10px;
            border-radius: 5px;
            color: #333;
            margin-left: 10px;
        }

    .assigned-users, .creator {
        margin-top: 20px;
    }

        .assigned-users p, .creator p {
            font-size: 14px;
            color: #333;
            font-weight: bold;
            margin-bottom: 10px;
        }

    .user {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

        .user img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

    .user-name {
        font-size: 16px;
        color: #333;
    }

    .task-controls {
        display: flex;
        flex-direction: column; /* Arrange buttons in a vertical column */
        align-items: center; /* Center buttons horizontally */
        gap: 10px; /* Space between buttons */
    }



    .btn-discuss {
        background-color: white;
        color: black;
        border: 1px solid #007bff; /* Blue border */
    }

        .btn-discuss img {
            filter: invert(34%) sepia(50%) saturate(2866%) hue-rotate(188deg) brightness(95%) contrast(104%);
        }

    .btn-edit {
        background-color: #add8e6; /* Light blue */
        color: black;
    }

        .btn-edit img {
            filter: invert(21%) sepia(74%) saturate(626%) hue-rotate(155deg) brightness(92%) contrast(91%);
        }

    .btn-delete {
        background-color: #f8d7da; /* Light red */
        color: black;
    }

        .btn-delete img {
            filter: invert(17%) sepia(73%) saturate(3000%) hue-rotate(336deg) brightness(98%) contrast(98%);
        }

    .task-controls button:hover {
        transform: translateY(-2px); /* Slightly lift the button on hover */
        box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
    }

    .task-controls {
        display: flex;
        flex-direction: column; /* Arrange buttons in a vertical column */
        align-items: center; /* Center buttons horizontally */
        gap: 10px; /* Space between buttons */
    }

        .task-controls button {
            display: flex;
            align-items: center;
            justify-content: space-between; /* Space out text and icon */
            width: 250px; /* Set button width */
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            border: 1px solid transparent;
            border-radius: 10px; /* Rounded corners */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 10px
        }

            .task-controls button img {
                margin-left: auto; /* Push icon to the right side */
            }

    .btn-discuss {
        background-color: white;
        color: black;
        border: 1px solid #007bff; /* Blue border */
    }

        .btn-discuss img {
            filter: invert(34%) sepia(50%) saturate(2866%) hue-rotate(188deg) brightness(95%) contrast(104%);
        }

    .btn-edit {
        background-color: #add8e6; /* Light blue */
        color: black;
    }

        .btn-edit img {
            filter: invert(21%) sepia(74%) saturate(626%) hue-rotate(155deg) brightness(92%) contrast(91%);
        }

    .btn-delete {
        background-color: #f8d7da; /* Light red */
        color: black;
    }

        .btn-delete img {
            filter: invert(17%) sepia(73%) saturate(3000%) hue-rotate(336deg) brightness(98%) contrast(98%);
        }

    .task-controls button:hover {
        transform: translateY(-2px); /* Slightly lift the button on hover */
        box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
    }

    .arrow-right {
        display: inline-block; /* Keeps the div inline */
        width: 10px;
        height: 10px;
        border: 2px solid #1E3A8A; /* Dark blue color */
        border-left: none;
        border-top: none;
        transform: rotate(45deg);
        margin: 2px 15px 2px 15px; /* Adjust as needed */
    }

    .container {
        display: flex;
        gap: 40px; /* Adds space between columns */
        width: 90%;
        height: 90%;
        margin: 30px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .left-container {
        flex: 8; /* Left container takes 80% of the space */
        padding-right: 20px;
        border-right: 1px solid #ddd;
    }

    .right-container {
        flex: 2; /* Right container takes 20% of the space */
        padding-left: 20px;
    }


    .task-container {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: white;
    }

    .task-icon {
        font-size: 24px;
        color: green;
        margin-right: 10px;
    }

    .task-details {
        flex: 1;
        font-size: 16px;
        color: #333;
    }

    .delete-icon {
        color: #f44336;
        font-size: 18px;
        cursor: pointer;
        margin-left: 10px;
    }

    .input-section {
        display: flex;
        align-items: center;
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: white;
    }

        .input-section i {
            color: #888;
            margin-right: 10px;
            font-size: 18px;
        }

    .input-field {
        flex: 1;
        border: none;
        font-size: 16px;
        outline: none;
    }

    .send-icon {
        font-size: 20px;
        color: #3b82f6;
        cursor: pointer;
    }

    .footer-task {
        margin-top: 20px;
        display: flex;
        align-items: center;
        font-size: 16px;
        color: #333;
        cursor: pointer;
    }

        .footer-task i {
            margin-left: 5px;
        }

        .footer-task:hover {
            color: #007bff;
        }

    hr {
        margin-top: 20px;
        border: none;
        border-top: 1px solid #ddd;
    }

    .date-container {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #666;
        font-family: Arial, sans-serif;
    }

    .date-text {
        margin-right: 10px;
        line-height: 1.5;
    }

    .double-arrow {
        color: red;
        font-size: 25px;
    }

    .button .icon {
        display: inline-block;
        width: 16px;
        height: 16px;
        margin-right: 10px;
        border: 2px solid black;
        border-radius: 2px;
        position: relative;
    }

        .button .icon::before,
        .button .icon::after {
            content: '';
            position: absolute;
            background-color: black;
        }

        .button .icon::before {
            width: 10px;
            height: 2px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .button .icon::after {
            width: 2px;
            height: 10px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }



    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5); /* Màu nền bán trong suốt */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999; /* Đảm bảo lớp phủ nằm trên tất cả các phần tử khác */
        visibility: hidden;
    }

    .blind-container-1 {
        width: 70%;
        background: #ffffff;
        padding: 20px;
        border-radius: 8px;
        position: relative;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 1000; /* Đảm bảo hộp container nằm trên overlay */
    }

    h2 {
        text-align: center;
        color: #333;
        margin-bottom: 10px;
        padding: 10px 50px 10px 50px;
    }

    .close-button {
        position: absolute;
        top: 20px;
        right: 20px;
        font-size: 20px;
        cursor: pointer;
        color: #666;
    }

    .member-section {
        display: flex;
        gap: 20px;
    }

    .panel {
        flex: 1;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        background: #fafafa;
    }

        .panel h3 {
            color: #2d5c89;
            text-align: center;
            margin-bottom: 10px;
        }

    .search-bar {
        display: flex;
        align-items: center;
        gap: 5px;
        margin-bottom: 15px;
    }

        .search-bar input[type="text"] {
            flex: 1;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .search-bar button {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            color: #666;
        }

    .toggle-switch {
        position: relative;
        width: 40px;
        height: 20px;
    }

        .toggle-switch input {
            display: none;
        }

        .toggle-switch label {
            width: 100%;
            height: 100%;
            background-color: #ddd;
            border-radius: 10px;
            display: block;
            cursor: pointer;
            position: relative;
        }

            .toggle-switch label::after {
                content: "";
                width: 18px;
                height: 18px;
                background-color: #ffffff;
                border-radius: 50%;
                position: absolute;
                top: 1px;
                left: 1px;
                transition: 0.3s;
            }

        .toggle-switch input:checked + label::after {
            left: 20px;
        }

    .member-list {
        list-style: none;
        margin-bottom: 10px;
    }

        .member-list li {
            display: flex;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #e0e0e0;
        }

    .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        overflow: hidden;
        display: inline-block;
        margin-right:30px;
    }

    .avatar-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    

    .info {
        flex: 1;
    }

        .info p {
            font-weight: bold;
            color: #333;
        }

    .role {
        font-size: 0.9em;
        color: #4a90e2;
    }

        .role.project-manager {
            color: #e74c3c;
        }

    .add-button {
        font-size: 18px;
        background: none;
        border: none;
        cursor: pointer;
        color: #2d5c89;
    }

    .pagination {
        display: flex;
        justify-content: center;
        gap: 5px;
    }

        .pagination button {
            padding: 5px 10px;
            border: 1px solid #ddd;
            background-color: #ffffff;
            cursor: pointer;
        }

            .pagination button.active {
                background-color: #2d5c89;
                color: #ffffff;
            }
    .completed {
        background-color: green; /* Màu xanh lá */
    }

    .in-progress {
        background-color: gold; /* Màu xanh dương */
    }

    .pending {
        background-color: orange; /* Màu cam */
    }

    .default {
        background-color: gray; /* Màu mặc định nếu không có trạng thái */
    }

</style>
<div class="breadcrumb">
    <span>Home</span> <div class="arrow-right"></div>
    <span>Tasks</span> <div class="arrow-right"></div>
    <span>ToDoList</span>
</div>
<div class="container">
    <div div="left-container">
        <div class="title">
            @Model.TaskName
            &nbsp;&nbsp;
            <div class="date-container" style="float:right">
                <div class="date-text">
                    <p>Start: @(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("dd/MM/yyyy HH:mm") : "N/A")</p>
                    <p>End: @(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("dd/MM/yyyy HH:mm") : "N/A")</p>
                </div>
                <div class="double-arrow">
                    <i class="fas fa-angle-double-up"></i>
                </div>
            </div>
        </div>

        <div class="task-info">
            <p><strong>Description:</strong> @Model.Description</p>
        </div>

        <div class="attachment-section">
            <img src="word-icon.png" alt="Word Document" class="attachment-icon">
            <div class="attachment-details">
                <p><strong>Tệp Đính Kèm:</strong> Mô tả dự án cho: Câu hỏi thực tập sinh</p>
                <p>2.9 MB</p>
            </div>
        </div>

        @{
            // Initialize counters for Done and Pending tasks
            int doneCount = 0;
            int totalCount = 0; // Start at 0, since we only want to count tasks that match the ParentID

            // Initialize the progress percentage (default to 0)
            double progressPercentage = 0;

            // Iterate over the tasks
            foreach (var task in Model.ListTasks)
            {
                // Check if the task is a child of the current task
                var isChildTask = task.ParentTaskID == Model.TaskID;
                if (isChildTask)
                {
                    // Increment the total task counter
                    totalCount++;

                    // Check task status and increment the Done count if it's done
                    if (task.Status == "Done")
                    {
                        doneCount++;
                    }
                <div class="task-container">
                    @if (task.Status == "Done")
                    {
                        <i class="fas fa-check task-icon"
                           data-id="@task.TaskID"
                           data-status="Done"
                           onclick="toggleTaskStatus(this)"></i>
                        <div class="task-details">@task.Description</div>
                        <i class="fas fa-times delete-icon" onclick="deleteSubTask(@task.TaskID)"></i>

                    }
                    else if (task.Status == "Pending")
                    {
                        <i class="fas fa-square task-icon"
                           data-id="@task.TaskID"
                           data-status="Pending"
                           onclick="toggleTaskStatus(this)"></i>
                        <div class="task-details">@task.Description</div>
                        <i class="fas fa-times delete-icon" onclick="deleteSubTask(@task.TaskID)"></i>

                    }
                </div>
                }
            }
            // Calculate the percentage of Done tasks only if there are tasks
            if (totalCount > 0)
            {
                progressPercentage = (double)doneCount / totalCount * 100;
            }
        }
        <br />
        <div style="font-weight:bold; color:darkblue">@doneCount/@totalCount Require Remaining</div>
        <div class="progress-bar">
            <div class="progress" style="width:@progressPercentage%"></div>
        </div>

        <!-- Input Section -->
        <div class="input-section">
            <i class="fas fa-clipboard-list"></i>

            <!-- Set taskName and projectId from Model -->
            <input type="text" id="taskDescription" class="input-field" placeholder="Enter Task Description">

            <!-- Hidden taskID (Generated as current timestamp) -->
            <input type="hidden" id="taskName" value="@Model.TaskName">
            <input type="hidden" id="projectId" value="@Model.ProjectID">
            <input type="hidden" id="taskID" value="@(int.Parse(DateTime.Now.ToString("MMddHHmmss")))" />
            <input type="hidden" id="parentTaskId" value="@Model.TaskID">
            <i class="fas fa-paper-plane send-icon" onclick="createSubTask()"></i>
        </div>

        <!-- Footer Section -->
        <hr>
        <div class="footer-task">
            Turn Back
            <i class="fas fa-undo-alt"></i>
        </div>
    </div>

    <div class="right-container">
        @{
            // Kiểm tra trạng thái và gán giá trị cho Model.Status
            if (doneCount > 0)
            {
                if (doneCount == totalCount)
                {
                    Model.Status = "Completed";  // Đổi trạng thái thành Completed
                }
                else
                {
                    Model.Status = "InProgress";  // Đổi trạng thái thành InProgress
                }
            }
            else
            {
                Model.Status = "Pending";  // Nếu doneCount == 0, trạng thái là Pending
            }

            // Gán lớp CSS cho trạng thái
            var statusClass = "";
            switch (Model.Status)
            {
                case "Completed":
                    statusClass = "completed";  // Màu xanh lá
                    break;
                case "InProgress":
                    statusClass = "in-progress";  // Màu xanh dương
                    break;
                case "Pending":
                    statusClass = "pending";  // Màu vàng
                    break;
                default:
                    statusClass = "default";  // Màu mặc định
                    break;
            }
        }

        <div class="status ">
            Status: <span class="@statusClass">@Model.Status</span>
        </div>



        <div class="assigned-users">
            <h6><strong>Người Làm</strong></h6>
            @foreach (var member in Model.AssignedMembers)
            {
                <div class="user">
                    <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" alt="User">
                    <span class="user-name">@member.FullName <br /> <span style="color:forestgreen; font-weight:bold">@member.Role</span>  </span>

                </div>
            }
            </div>

        


            <div class="creator">
                <h6><strong>Người Tạo</strong></h6>
                <div class="user">
                    <img src="@Url.Content("~/Content/images/member-img/" + Model.Creator.ImageMember)" alt="User">
                    <span class="user-name">@Model.Creator.FullName  <br /><span style="color:red; font-weight:bold">@Model.Creator.Role</span></span>
                </div>
            </div>
            <br />
            <h4><strong><center>Thao Tác</center></strong></h4>
            <div class="task-controls">
                <button class="button" id="button-member">
                    Add/Delete Member   &nbsp;&nbsp;&nbsp;&nbsp;
                    <span class="icon"></span>
                </button>
                <button class="btn-discuss">
                    Thảo Luận <img src="discuss-icon.png" alt="Discuss">
                </button>
                <button class="btn-edit">
                    Edit Task <img src="edit-icon.png" alt="Edit">
                </button>

                <form action="@Url.Action("DeleteTaskByMember", "Home")" method="post">
                    <input type="hidden" name="taskId" value="@Model.TaskID" />
                    @foreach (var member in Model.AssignedMembers)
                    {
                        <input type="hidden" name="memberId" value="@member.MemberID" />
                    }
                    <button class="btn-delete" type="submit">
                        Delete Task <img src="delete-icon.png" alt="Delete">
                    </button>
                </form>
            </div>
        </div>
</div>

<div class="overlay" id="overlay">
    <div class="blind-container-1">
        <h2>Add Members To Task</h2>
        <div class="close-button">✕</div>
        <div class="member-section">
            <!-- Members List -->
            <div class="panel">
                <h3>Members in Project</h3>
                <div class="search-bar">
                    <input type="text" placeholder="Search Name Members...">
                    <button>🔍</button>
                    <div class="toggle-switch">
                        <input type="checkbox" id="toggle-members">
                        <label for="toggle-members"></label>
                    </div>
                </div>
                @foreach (var member in Model.ProjectMembers)
                {
                    <ul class="member-list">
                        <li>
                            <div class="avatar">
                                <!-- Display the member's image if available -->
                                <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)"  class="avatar-img" />
                            </div>
                            <div class="info">
                                <p>@member.FullName</p>
                                <span class="role @(member.Role == "Manager" ? "project-manager" : "")">@member.Role</span>
                            </div>
                            <button class="add-button"
                                    data-memberid="@member.MemberID"
                                    data-taskid="@Model.TaskID" 
                                    data-assignedbyid="@Model.Creator.MemberID"
                                    onclick="assignEmployee(this)">➕
                            </button>
                        </li>
                     </ul>
                  }
                      
                        <div class="pagination">
                            <button>◀</button>
                            <button class="active">1</button>
                            <button>2</button>
                            <button>3</button>
                            <button>▶</button>
                        </div>
                </div>

            <!-- Members In Project -->
            <div class="panel">
                <h3>Members In Task</h3>
                <div class="search-bar">
                    <input type="text" placeholder="Search Name Members...">
                    <button>🔍</button>
                    <div class="toggle-switch">
                        <input type="checkbox" id="toggle-project-members">
                        <label for="toggle-project-members"></label>
                    </div>
                </div>
                <ul class="member-list">
                   
                    @foreach (var member in Model.AssignedMembers)
                    {
                        <li>
                            <div class="avatar">
                                <!-- Display the member's image if available -->
                                <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" class="avatar-img" />
                            </div>
                            <div class="info">
                                <p>@member.FullName</p>
                                <span class="role @(member.Role == "Manager" ? "project-manager" : "")">@member.Role</span>
                            </div>
                            <i class="fas fa-times delete-icon" onclick="deleteTaskAssignment('@Model.TaskID', '@member.MemberID')"></i>
                        </li>
                    }
                </ul>
                    <div class="pagination">
                        <button>◀</button>
                        <button class="active">1</button>
                        <button>2</button>
                        <button>3</button>
                        <button>▶</button>
                    </div>
                </div>
        </div>
    </div>
</div>
</body>


<!-- Thêm jQuery từ CDN -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>

    function toggleTaskStatus(element) {
        var taskId = element.dataset.id;
        var taskStatus = element.dataset.status;

        console.log("Task ID: " + taskId);
        console.log("Task Status: " + taskStatus);

        $.ajax({
            url: '/Home/ToggleStatus',  // URL tới Action method trong Controller
            type: 'POST',
            data: {
                taskId: taskId,          // Tham số TaskID
                status: taskStatus       // Tham số Status
            },
            success: function (response) {
                console.log(response);  // In response ra console để kiểm tra dữ liệu

                if (response.success) {
                    alert('Task status updated successfully!');
                    location.reload(); // Tải lại trang hiện tại
                    // Cập nhật trạng thái của task trên giao diện mà không tải lại trang
                    // Nếu bạn muốn thay đổi giao diện sau khi cập nhật
                    var taskElement = document.querySelector('[data-id="' + taskId + '"]');
                    if (taskElement) {
                        taskElement.dataset.status = response.newStatus;
                        // Cập nhật giao diện (ví dụ thay đổi icon trạng thái task)
                        taskElement.classList.toggle('fa-check', response.newStatus === 'Done');
                        taskElement.classList.toggle('fa-square', response.newStatus === 'Pending');
                    }
                } else {
                    alert('Error: ' + response.message);  // Hiển thị lỗi nếu có
                }
            },
            error: function (xhr, status, error) {
                alert('An error occurred: ' + error);  // Nếu có lỗi trong AJAX
            }
        });
    }

    function createSubTask() {
        // Thu thập dữ liệu từ các trường
        var subTask = {
            TaskName: document.getElementById('taskName').value,
            Description: document.getElementById('taskDescription').value,
            ProjectID: document.getElementById('projectId').value,
            ParentTaskID: parseInt(document.getElementById('parentTaskId').value) 
        };
        console.log(subTask.TaskID)
        console.log(subTask.TaskName)
        console.log(subTask.Description)
        console.log(subTask.ProjectID)
        console.log(subTask.ParentTaskID)
        // Kiểm tra dữ liệu đầu vào trước khi gửi
        if (!subTask.TaskName || !subTask.ProjectID) {
            alert("Task Name and Project ID are required.");
            return;
        }

        // Gửi yêu cầu AJAX
        $.ajax({
            url: '/Home/CreateSubTask',
            type: 'POST',
            data: JSON.stringify(subTask),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                if (response.success) {
                    alert('SubTask created successfully!');
                    location.reload(); // Reload lại trang sau khi tạo thành công
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function (xhr, status, error) {
                alert('An error occurred: ' + error);
            }
        });

    }
    function deleteSubTask(taskId) {
        if (confirm("Are you sure you want to delete this task?")) {
            $.ajax({
                url: '/Home/DeleteSubTask', // URL của Action Method
                type: 'POST',
                data: { taskId: taskId },
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        // Reload lại danh sách task hoặc ẩn task đã xóa
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('An error occurred: ' + error);
                }
            });
        }
    }

    function assignEmployee(button) {
        var memberId = $(button).data('memberid');
        var taskId = $(button).data('taskid');
        var assignedByID = $(button).data('assignedbyid');
      
        // AJAX request to assign the employee to the task
        $.ajax({
            url: '/Home/AssignEmployee',  // The backend action URL
            type: 'POST',
            data: {
                memberId: memberId,
                taskId: taskId,
                assignedByID: assignedByID
            },
            success: function (response) {
                if (response.success) {
                    alert('Employee assigned successfully!');
                    location.reload();  // Reload the page to see the updated task assignment
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function (xhr, status, error) {
                alert('An error occurred: ' + error);
            }
        });
    }
    function deleteTaskAssignment(taskId, memberId) {
        if (confirm("Are you sure you want to remove this assignment?")) {
            $.ajax({
                url: '/Home/DeleteTaskAssignment', // URL for the delete action
                type: 'POST',
                data: JSON.stringify({ taskId: taskId, memberId: memberId }),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    if (response.success) {
                        alert("Task assignment deleted successfully!");
                        location.reload(); // Reload the page to refresh the list
                    } else {
                        alert("Error: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred: " + error);
                }
            });
        }
    }
    document.getElementById('button-member').addEventListener('click', function () {
        var overlay = document.getElementById('overlay');
        overlay.style.visibility = 'visible'; // Hiển thị overlay
    });

    document.querySelector('.close-button').addEventListener('click', function () {
        var overlay = document.getElementById('overlay');
        overlay.style.visibility = 'hidden'; // Hiển thị overlay
    });

</script>
