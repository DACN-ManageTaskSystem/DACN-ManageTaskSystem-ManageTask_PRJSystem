    @model ManageTaskWeb.Models.TaskViewModel
@{
    ViewBag.Title = "DetailTask";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="@Url.Content("~/Content/css/detailtask.css?v=1")" rel="stylesheet" />

<div class="breadcrumb">
    <a style="text-decoration:none" href="/Home/TrangChu"><span>Home</span></a>  <i class="fa-solid fa-chevron-right" style="margin-left:10px;margin-right:10px; margin-top: 3px;"></i>
    <span>Tasks</span> <i class="fa-solid fa-chevron-right" style="margin-left:10px;margin-right:10px ;margin-top: 3px;"></i>
    <span>DetailTask</span>
</div>
<div class="container">
    <div div="left-container" style="width:70%">
        <div class="title">
            @Model.TaskName
            &nbsp;&nbsp;
            <div class="date-container" style="float:right">
                <div class="date-text">
                    <p>Start: @(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("dd/MM/yyyy") : "N/A")</p>
                    <p>End: @(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("dd/MM/yyyy") : "N/A")</p>
                </div>
                <div class="double-arrow">
                    Piority:
                    @{
                        string iconClass = "";

                        // Determine the icon class based on the priority value
                        switch (Model.Priority)
                        {
                            case 1:
                                iconClass = "fa-angles-up ic1 icon";
                                break;
                            case 2:
                                iconClass = "fa-angle-up ic2 icon";
                                break;
                            case 3:
                                iconClass = "fa-bars ic3 icon";
                                break;
                            case 4:
                                iconClass = "fa-angle-down ic4 icon";
                                break;
                            case 5:
                                iconClass = "fa-angles-down ic5 icon";
                                break;
                            default:
                                iconClass = "fa-question-circle ic-default icon"; // Default icon for other cases
                                break;
                        }
                    }
                    <i class="fas @iconClass"></i>
                </div>
            </div>
        </div>

        <div class="task-info">
            <p><strong>Description:</strong> @Model.Description</p>
        </div>

        <div class="attachment-section">
            <img src="~/Content/images/drive-icon.png" alt="Google Drive" class="attachment-icon">
            <div class="attachment-details">
                @if (!string.IsNullOrEmpty(Model.DriveLink))
                {
                    <a href="@Model.DriveLink" target="_blank" class="drive-link">
                        <p><strong>Tài liệu của Task</strong></p>
                        <p>Nhấn để xem tài liệu</p>
                    </a>
                }
                else
                {
                    <p><strong>Tài liệu của Task</strong></p>
                    <p>Chưa có tài liệu</p>
                }
            </div>
        </div>

        @{
            // Initialize counters for Done and Pending tasks
            int doneCount = 0;
            int totalCount = 0; // Start at 0, since we only want to count tasks that match the ParentID

            // Initialize the progress percentage (default to 0)
            double progressPercentage = 0;

            // Iterate over the tasks
            foreach (var task in Model.ListTasks)
            {
                // Check if the task is a child of the current task
                var isChildTask = task.ParentTaskID == Model.TaskID;
                if (isChildTask)
                {
                    // Increment the total task counter
                    totalCount++;

                    // Check task status and increment the Done count if it's done
                    if (task.Status == "Completed")
                    {
                        doneCount++;
                    }
                    <style>
                        .blur{
                           color:red;
                           font-weight:bold
                        }
                    </style>
                    <div class="task-container">
                        @foreach (var assignment in Model.TaskAssignment)
                        {
                            if (assignment.TaskID == task.TaskID)
                            {
                                if (task.Status == "Completed")
                                {
                                    if (ViewBag.Role == "Admin" || ViewBag.Role == "Manager")
                                    {

                                        <div class="task-details">@task.Description</div>
                                        <td>
                                            <select class="form-control status-dropdown" data-task-id="@task.TaskID" onchange="updateTaskStatus(this)">
                                                <option value="Pending" @(task.Status == "Pending" ? "selected" : "")>Pending</option>
                                                <option value="Completed" @(task.Status == "Completed" ? "selected" : "")>Completed</option>
                                            </select>
                                        </td>
                                    }
                                    else if (assignment.MemberID == ViewBag.MemberID)
                                    {
                                        <div class="task-details blur">Your Sub Task: @task.Description</div>
                                        <td>
                                            <select class="form-control status-dropdown" data-task-id="@task.TaskID" onchange="updateTaskStatus(this)">
                                                <option value="Pending" @(task.Status == "Pending" ? "selected" : "")>Pending</option>
                                                <option value="Completed" @(task.Status == "Completed" ? "selected" : "")>Completed</option>
                                            </select>
                                        </td>
                                    }
                                    else
                                    {
                                        <div class="task-details">@task.Description</div>
                                        <td>
                                            <select style="background-color:dimgrey" class="form-control status-dropdown" data-task-id="@task.TaskID" disabled>
                                                <option value="Pending" @(task.Status == "Pending" ? "selected" : "") disabled>Pending</option>
                                                <option value="Completed" @(task.Status == "Completed" ? "selected" : "")>Completed</option>
                                            </select>

                                        </td>
                                    }

                                    if (ViewBag.Role == "Admin" || ViewBag.Role == "Manager")
                                    {
                                        <select class="form-control assigned-member-dropdown" data-assignment-id="@assignment.TaskAssignmentID" data-member-id="@assignment.MemberID" onchange="updateAssignedMember(this)">
                                            <option value="0" @(assignment.MemberID == "0" ? "selected" : "")>
                                                Không có thành viên
                                            </option>
                                            @foreach (var member in Model.AssignedMembers)
                                            {


                                                <option value="@member.MemberID" @(member.MemberID == assignment.MemberID ? "selected" : "")>
                                                    @member.FullName
                                                </option>
                                            }
                                        </select>
                                        <i class="fas fa-times delete-icon" onclick="deleteSubTask(@task.TaskID)"></i>
                                    }
                                }

                                else if (task.Status == "Pending")
                                {

                                    if (ViewBag.Role == "Admin" || ViewBag.Role == "Manager")
                                    {

                                        <div class="task-details">@task.Description</div>
                                        <td>
                                            <select class="form-control status-dropdown" data-task-id="@task.TaskID" onchange="updateTaskStatus(this)">
                                                <option value="Pending" @(task.Status == "Pending" ? "selected" : "")>Pending</option>
                                                <option value="Completed" @(task.Status == "Completed" ? "selected" : "")>Completed</option>
                                            </select>
                                        </td>
                                    }
                                    else if (assignment.MemberID == ViewBag.MemberID)
                                    {
                                        <div class="task-details blur">Your Sub Task: @task.Description</div>
                                        <td>
                                            <select class="form-control status-dropdown" data-task-id="@task.TaskID" onchange="updateTaskStatus(this)">
                                                <option value="Pending" @(task.Status == "Pending" ? "selected" : "")>Pending</option>
                                                <option value="Completed" @(task.Status == "Completed" ? "selected" : "")>Completed</option>
                                            </select>
                                        </td>
                                    }
                                    else
                                    {
                                        <div class="task-details">@task.Description</div>
                                        <td>
                                            <select style="background-color:dimgrey" class="form-control status-dropdown" data-task-id="@task.TaskID" disabled>
                                                <option value="Pending" @(task.Status == "Pending" ? "selected" : "") disabled>Pending</option>
                                                <option value="Completed" @(task.Status == "Completed" ? "selected" : "")>Completed</option>
                                            </select>

                                        </td>
                                    }

                                    if (ViewBag.Role == "Admin" || ViewBag.Role == "Manager")
                                    {
                                        <select class="form-control assigned-member-dropdown" data-assignment-id="@assignment.TaskAssignmentID" data-member-id="@assignment.MemberID" onchange="updateAssignedMember(this)">
                                            <option value="0" @(assignment.MemberID == "0" ? "selected" : "")>
                                                Không có thành viên
                                            </option>
                                            @foreach (var member in Model.AssignedMembers)
                                            {

                                                <option value="@member.MemberID" @(member.MemberID == assignment.MemberID ? "selected" : "")>
                                                    @member.FullName
                                                </option>
                                            }
                                        </select>
                                        <i class="fas fa-times delete-icon" onclick="deleteSubTask(@task.TaskID)"></i>
                                    }

                                }
                            }
                        }
                    </div>
                }
            }
            // Calculate the percentage of Done tasks only if there are tasks
            if (totalCount > 0)
            {
                progressPercentage = (double)doneCount / totalCount * 100;
            }
        }
        <br />
        <div style="font-weight:bold; color:darkblue">@doneCount/@totalCount Require Remaining</div>
        <div class="progress-bar">
            <div class="progress" style="width:@progressPercentage%"></div>
        </div>

        <!-- Input Section -->
        @if (ViewBag.Role == "Admin" || ViewBag.Role == "Manager")
        {
            <div class="input-section">
                <i class="fas fa-clipboard-list"></i>

                <!-- Nhập mô tả task -->
                <input type="text" id="taskDescription" class="input-field" placeholder="Enter SubTask Description to add New......">


                <!-- Các input ẩn -->
                <input type="hidden" id="taskName" value="@Model.TaskName">
                <input type="hidden" id="projectId" value="@Model.ProjectID">
                <input type="hidden" id="createbyId" value="@Model.Creator.MemberID">
                <input type="hidden" id="parentTaskId" value="@Model.TaskID"> &nbsp; &nbsp;
                <input type="hidden" id="endDateId" value="@Model.EndDate">

                <!-- Biểu tượng gửi và sự kiện onclick -->
                <i class="fas fa-paper-plane send-icon" onclick="createSubTask()"></i>
            </div>
        }
            <!-- Input ẩn để lưu MemberID đã chọn -->
            <input type="hidden" id="selectedMemberID" value="@Model.TaskAssignment.FirstOrDefault()?.MemberID" />

            <!-- Footer Section -->
            <hr>
            <div class="footer-task" onclick="goBack()">
                Turn Back
                <i class="fas fa-undo-alt"></i>
            </div>

            <script>
                function goBack() {
                    window.history.back();
                }
            </script>
        </div>

    <div class="right-container" style="width:30%">
        @{
            // Kiểm tra trạng thái và gán giá trị cho Model.Status
            if (doneCount > 0)
            {
                if (doneCount == totalCount)
                {
                    Model.Status = "Completed";  // Đổi trạng thái thành Completed
                }
                else
                {
                    Model.Status = "InProgress";  // Đổi trạng thái thành InProgress
                }
            }
            else
            {
                Model.Status = "Pending";  // Nếu doneCount == 0, trạng thái là Pending
            }

            // Gán lớp CSS cho trạng thái sau khi cập nhật Model.Status
            var statusClass = "";
            switch (Model.Status)
            {
                case "Completed":
                    statusClass = "completed";  // Màu xanh lá
                    break;
                case "InProgress":
                    statusClass = "in-progress";  // Màu xanh dương
                    break;
                case "Pending":
                    statusClass = "pending";  // Màu vàng
                    break;
                default:
                    statusClass = "default";  // Màu mặc định
                    break;
            }
        }
        <div class="status ">
            Status: <span class="@statusClass">@Model.Status</span>
        </div>


        <div class="assigned-users">
            <h6><strong>Người Làm</strong></h6>
            <div class="user-list">
                @foreach (var member in Model.AssignedMembers)
                {
                    <div class="user">
                        <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" alt="User">
                        <span class="user-name">
                            @member.FullName <br />
                            <span style="color:forestgreen; font-weight:bold">@member.Role</span>
                        </span>
                    </div>
                }
            </div>
        </div>


        <div class="creator">
            <h6><strong>Người Tạo</strong></h6>
            <div class="user">
                <img src="@Url.Content("~/Content/images/member-img/" + Model.Creator.ImageMember)" alt="User">
                <span class="user-name">@Model.Creator.FullName  <br /><span style="color:red; font-weight:bold">@Model.Creator.Role</span></span>
            </div>
        </div>
        <br />
        <h4><strong><center>Thao Tác</center></strong></h4>
        <div class="task-controls">
            <button class="btn-discuss" onclick="window.location.href='@Url.Action("GroupChat", "Home", new { projectId = Model.ProjectID })'">
                Thảo Luận <img src="discuss-icon.png" alt="Discuss">
            </button>
            @if (ViewBag.Role == "Admin" || ViewBag.Role == "Manager")
            {
                <button class="button" id="button-member">
                    Add/Delete Member   &nbsp;&nbsp;&nbsp;&nbsp;
                    <span class="icon"></span>
                </button>
                <button class="btn-transfer" onclick="showTransferPopup()">
                    Transfer Task <img src="transfer-icon.png" alt="Transfer">
                </button>
                <!-- Nút xóa task -->
                <form action="/Home/DeleteTaskByMember" method="post" id="deleteForm">
                    <input type="hidden" name="taskId" value="@Model.TaskID" />
                    <button class="btn-delete" type="submit" onclick="showDeleteWarning(event)">
                        Delete Task <img src="delete-icon.png" alt="Delete">
                    </button>
                </form>
            }

            <!-- Modal thông báo xác nhận xóa -->
            <div id="deleteWarningModal" class="modal">
                <div class="modal-content">
                    =                    <h2>Are you sure you want to delete this task?</h2>
                    <p>This action will also remove all related Task Assignments and Task Logs.</p>
                    <div style="display:flex; margin:auto">
                        <button id="confirmDelete" class="btn btn-danger" onclick="confirmDelete()">Yes, Delete</button>
                        <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    </div>

                </div>
            </div>
            <style>
                /* Modal background */
                .modal {
                    display: none; /* Hidden by default */
                    position: fixed; /* Stay in place */
                    z-index: 1; /* Sit on top */
                    left: 0;
                    top: 0;
                    width: 100%;
                    height: 100%;
                    overflow: auto; /* Enable scroll if needed */
                    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
                    padding-top: 60px;
                }

                /* Modal content */
                .modal-content {
                    background-color: white;
                    margin: 5% auto;
                    padding: 20px;
                    border: 1px solid #888;
                    width: 50%; /* Could be more or less, depending on screen size */
                    text-align: center;
                }

                /* Close button */
                .close {
                    color: #aaa;
                    float: right;
                    font-size: 28px;
                    font-weight: bold;
                }

                    .close:hover,
                    .close:focus {
                        color: black;
                        text-decoration: none;
                        cursor: pointer;
                    }

                /* Button styles */
                .btn-delete, .btn-danger, .btn-secondary {
                    padding: 10px 20px;
                    margin: 5px;
                    font-size: 16px;
                    cursor: pointer;
                }

                .btn-danger {
                    background-color: #d9534f;
                    color: white;
                }

                .btn-secondary {
                    background-color: #6c757d;
                    color: white;
                }
            </style>
        </div>
    </div>
</div>
</body>


<!-- Add/DeleteMember  Task Popup -->
<div class="overlay" id="overlay">
    <div class="blind-container-1">
        <h2>Add Members To Task</h2>
        <div class="close-button">✕</div>
        <div class="member-section">
            <!-- Members List -->
            <div class="panel">
                <h3>Members in Project</h3>
                <div class="search-bar">
                    <input type="text" id="projectSearchInput" placeholder="Search Name Members..." onkeyup="filterMembers()">
                    <button>🔍</button>
                </div>
                @foreach (var member in Model.ProjectMembers)
                {
                    // Kiểm tra xem member có trong AssignedMembers không
                    if (!Model.AssignedMembers.Any(am => am.MemberID == member.MemberID))
                    {
                        <ul class="member-list">
                            <li>
                                <div class="avatar">
                                    <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" class="avatar-img" />
                                </div>
                                <div class="info">
                                    <p>@member.FullName</p>
                                    <span class="role @(member.Role == "Manager" ? "project-manager" : "")">@member.Role</span>
                                </div>
                                <button class="add-button"
                                        data-memberid="@member.MemberID"
                                        data-taskid="@Model.TaskID"
                                        data-assignedbyid="@Model.Creator.MemberID"
                                        onclick="assignEmployee(this)">
                                    ➕
                                </button>
                            </li>
                        </ul>
                    }
                }


            </div>

            <!-- Members In Project -->
            <div class="panel">
                <h3>Members In Task</h3>
                <div class="search-bar">
                    <input type="text" id="taskSearchInput" placeholder="Search Name Members..." onkeyup="filterTaskMembers()">
                    <button>🔍</button>
                </div>
                <ul class="member-list">
                    @foreach (var member in Model.AssignedMembers)
                    {
                        bool canDelete = true; // Biến kiểm tra nếu có thể xóa
                            foreach (var task in Model.TaskAssignment)
                            {
                              
                                    if (task.MemberID == member.MemberID)
                                    {
                                        canDelete = false; // Nếu thành viên có liên quan đến subtask, không thể xóa
                                        break; // Dừng vòng lặp kiểm tra subtask
                                    }
                            }                                   

                        <li>
                            <div class="avatar">
                                <!-- Display the member's image if available -->
                                <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" class="avatar-img" />
                            </div>
                            <div class="info">
                                <p>@member.FullName</p>
                                <span class="role @(member.Role == "Manager" ? "project-manager" : "")">@member.Role</span>
                            </div>

                            @* Chỉ hiển thị nút xóa nếu có thể xóa và số lượng thành viên > 1 *@
                            @if (Model.AssignedMembers.Count() > 1 )
                            {
                                if (canDelete == true)
                                {
                                 <i class="fas fa-times delete-icon" onclick="deleteTaskAssignment('@Model.TaskID', '@member.MemberID')"></i>
                                }
                            }

                        </li>
                    }
                </ul>

            </div>
            <style>
                .panel {
                    max-height: 600px; /* Chiều cao tối đa của danh sách, điều chỉnh theo nhu cầu */
                    overflow-y: auto; /* Hiển thị thanh cuộn khi nội dung vượt quá chiều cao */
                    padding: 0;
                    margin: 0;
                    list-style-type: none;
                }
                    .panel h3 {
                        padding: 16px;
                        margin: 0;
                    }
                    .panel .search-bar {
                        padding: 0px 16px 16px 16px;
                        margin: 0;
                    }
                    .panel ul li {
                        padding: 10px;
                        border-bottom: 1px solid #ccc; /* Thêm đường viền dưới mỗi item để dễ nhìn */
                    }

                .avatar-img {
                    width: 40px;
                    height: 40px;
                    border-radius: 50%;
                }

                .delete-icon {
                    cursor: pointer;
                    color: red;
                }
            </style>
        </div>
    </div>
</div>

<!-- Transfer Task Popup -->
<div class="transfer-popup" id="transferTaskOverlay">
    <div class="transfer-content">
        <h2>Transfer Tasks</h2>
        <div class="close-button" onclick="closeTransferPopup()">✕</div>

        <div class="transfer-columns">
            <!-- From Member Column -->
            <div class="transfer-column">
                <h3>Transfer From</h3>
                <select id="fromMemberSelect" onchange="loadMemberSubtasks()">
                    <option value="">Select member...</option>
                    @foreach (var member in Model.AssignedMembers)
                    {
                        <option value="@member.MemberID">@member.FullName</option>
                    }
                </select>

                <!-- Subtasks Section -->
                <div id="subtasksSection" style="display: none;">
                    <div class="subtasks-header">
                        <h3>Available Tasks</h3>
                        <div class="select-all-container">
                            <input type="checkbox" id="selectAllTasks" onchange="toggleAllTasks()">
                            <label for="selectAllTasks">Select All</label>
                        </div>
                    </div>
                    <div id="subtasksList">
                        <!-- Subtasks will be populated here -->
                    </div>
                </div>
            </div>

            <!-- To Member Column -->
            <div class="transfer-column">
                <h3>Transfer To</h3>
                <select id="toMemberSelect" onchange="updateTransferButton()">
                    <option value="">Select member...</option>
                    @foreach (var member in Model.AssignedMembers)
                    {
                        <option value="@member.MemberID">@member.FullName</option>
                    }
                </select>
            </div>
        </div>

        <button id="transferButton" onclick="confirmTransfer()" disabled>
            Transfer Selected Tasks
        </button>
    </div>
</div>
</body>

<style>
    .transfer-popup {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .transfer-content {
        background: white;
        padding: 30px;
        border-radius: 12px;
        width: 90%;
        max-width: 800px;
        position: relative;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .transfer-columns {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .transfer-column {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

        .transfer-column h3 {
            margin-bottom: 15px;
            color: #2c3e50;
            font-size: 1.1rem;
        }

        .transfer-column select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            margin-bottom: 10px;
        }

    #subtasksSection {
        grid-column: 1;
        margin-top: 20px;
    }

    .subtasks-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .select-all-container {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
        color: #666;
    }

    #selectAllTasks {
        cursor: pointer;
    }

    .subtask-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px;
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        margin-bottom: 8px;
    }

        .subtask-item:hover {
            background: #f8f9fa;
        }

        .subtask-item input[type="checkbox"] {
            width: 16px;
            height: 16px;
            cursor: pointer;
        }

    #transferButton {
        width: 100%;
        padding: 12px;
        background: #4CAF50;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;
        transition: background 0.3s;
        margin-top: 20px;
    }

        #transferButton:hover:not(:disabled) {
            background: #45a049;
        }

        #transferButton:disabled {
            background: #cccccc;
            cursor: not-allowed;
        }
</style>
<!-- Thêm jQuery từ CDN -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>

/*Update Trạng thái task*/
function updateTaskStatus(selectElement) {
        // Lấy TaskID từ thuộc tính data-task-id
        var taskId = selectElement.getAttribute("data-task-id");
        var newStatus = selectElement.value; // Lấy trạng thái mới từ combo box

        var taskId_Main = '@Model.TaskID';  // Use the actual TaskID from your model
        // Gửi yêu cầu AJAX đến server
        fetch('/Home/UpdateStatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val() // Nếu sử dụng AntiForgeryToken
            },
            body: JSON.stringify({
                taskId: taskId,
                status: newStatus,
                taskId_Main:taskId_Main,
            })
        })
            .then(response => {
                if (response.ok) {
                    alert('Status updated successfully!');
                     location.reload(); // Tải lại trang hiện tại
                } else {
                    alert('Failed to update status.');
                }
            })
            .catch(error => {
                console.error('Error updating status:', error);
            });
    }


    // Kiểm tra sự kiện onchange trong dropdown
function updateAssignedMember(selectElement) {
        console.log("Dropdown value changed");  // Kiểm tra khi dropdown thay đổi

        var taskAssignmentId = selectElement.getAttribute('data-assignment-id'); // ID của TaskAssignment
        var memberId = selectElement.value; // ID của thành viên mới được chọn

        console.log(`TaskAssignmentID: ${taskAssignmentId}, MemberID: ${memberId}`); // Kiểm tra giá trị

        // Gửi thông tin tới server để cập nhật TaskAssignment
        $.ajax({
            url: '/Home/UpdateAssignedMember',
            type: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val()
            },
            data: {
                taskAssignmentId: taskAssignmentId,
                memberId: memberId
            },
            success: function (response) {
                if (response.success) {
                    alert('Assigned member updated successfully!');
                    location.reload();
                } else {
                    alert('Failed to update assigned member.');
                }
            },
            error: function (error) {
                console.error('Error:', error);
            }
        });

    }
    // Lắng nghe sự kiện 'change' trên phần tử select

 /*Update Trạng thái task*/
function createSubTask() {
    // Lấy giá trị được chọn từ select (ID của Member)

    // Thu thập dữ liệu từ các trường
    var subTask = {
        TaskName: document.getElementById('taskName').value,
        Description: document.getElementById('taskDescription').value,  // Lấy giá trị mô tả
        ProjectID: document.getElementById('projectId').value,
        ParentTaskID: parseInt(document.getElementById('parentTaskId').value),
        CreateBy: document.getElementById('createbyId').value,  // Lấy giá trị creator ID
        MemberID: "0",  // Lấy giá trị từ select
        EndDate: document.getElementById('endDateId').value
    }; 

    // Kiểm tra dữ liệu đầu vào
    if (!subTask.TaskName || !subTask.ProjectID || !subTask.Description || !subTask.MemberID) {
        alert("Please fill in all required fields.");
        return;
    }

    // Gửi yêu cầu AJAX
    $.ajax({
        url: '/Home/CreateSubTask',  // Đảm bảo URL này đúng
        type: 'POST',
        data: JSON.stringify(subTask),  // Gửi dữ liệu dưới dạng JSON
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
            if (response.success) {
                alert('SubTask created successfully!');
                location.reload();  // Reload lại trang sau khi tạo thành công
            } else {
                alert('Error: ' + response.message);
            }
        },
        error: function (xhr, status, error) {
            alert('An error occurred: ' + error);
        }
    });
}



/*xóa  Sub task*/
function deleteSubTask(taskId) {
        if (confirm("Are you sure you want to delete this task?")) {
            $.ajax({
                url: '/Home/DeleteSubTask', // URL của Action Method
                type: 'POST',
                data: { taskId: taskId },
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        // Reload lại danh sách task hoặc ẩn task đã xóa
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('An error occurred: ' + error);
                }
            });
        }
    }
/*Thêm nhân viên vào task*/
    function assignEmployee(button) {
        var memberId = $(button).data('memberid');
        var taskId = $(button).data('taskid');
        var assignedByID = $(button).data('assignedbyid');
        $.ajax({
            url: '/Home/AssignEmployee',  
            type: 'POST',
            data: {
                memberId: memberId,
                taskId: taskId,
                assignedByID: assignedByID
            },
            success: function (response) {
                if (response.success) {
                    alert('Employee assigned successfully!');
                    location.reload();  // Reload the page to see the updated task assignment
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function (xhr, status, error) {
                alert('An error occurred: ' + error);
            }
        });
    }
    /*xóa nhân viên */

    function deleteTaskAssignment(taskId, memberId) {
        if (confirm("Are you sure you want to remove this assignment?")) {
            $.ajax({
                url: '/Home/DeleteTaskAssignment', 
                type: 'POST',
                data: JSON.stringify({ taskId: taskId, memberId: memberId }),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    if (response.success) {
                        alert("Task assignment deleted successfully!");
                        location.reload(); // Reload the page to refresh the list
                    } else {
                        alert("Error: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred: " + error);
                }
            });
        }

    }

    document.getElementById('button-member').addEventListener('click', function () {
        var overlay = document.getElementById('overlay');
        overlay.style.visibility = 'visible'; // Hiển thị overlay
    });

    document.querySelector('.close-button').addEventListener('click', function () {
        var overlay = document.getElementById('overlay');
        overlay.style.visibility = 'hidden'; // Hiển thị overlay
    });


    // Show transfer popup
    function showTransferPopup() {
        document.getElementById('transferTaskOverlay').style.display = 'flex';
    }

    // Close transfer popup
    function closeTransferPopup() {
        document.getElementById('transferTaskOverlay').style.display = 'none';
    }

    // Search members
    function searchMembers() {
        const searchText = document.getElementById('memberSearch').value.toLowerCase();
        const memberItems = document.querySelectorAll('.member-item');

        memberItems.forEach(item => {
            const memberName = item.querySelector('.info p').textContent.toLowerCase();
            if (memberName.includes(searchText)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Transfer tasks
    function transferTasks(fromMemberId, toMemberId, taskIds) {
        // Convert taskIds to an array if it's not already
        if (!Array.isArray(taskIds)) {
            taskIds = [taskIds];
        }

        console.log("Transferring tasks:", {fromMemberId, toMemberId, taskIds}); // Debug log

        $.ajax({
            url: '@Url.Action("TransferTask", "Home")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                fromMemberId: fromMemberId,
                toMemberId: toMemberId,
                taskIds: taskIds
            }),
            success: function(response) {
                if (response.success) {
                    alert(response.message);
                    location.reload();
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function(xhr, status, error) {
                alert('An error occurred: ' + error);
            }
        });
    }

    // Add event listener for search input
    document.getElementById('memberSearch').addEventListener('input', searchMembers);


    // Lọc thành viên trong dự án
    function filterMembers() {
        const input = document.getElementById('projectSearchInput').value.toLowerCase();
        const members = document.querySelectorAll('.panel:first-of-type .member-list li'); // Chọn danh sách đầu tiên

        members.forEach(member => {
            const name = member.querySelector('.info p').textContent.toLowerCase();
            member.style.display = name.includes(input) ? '' : 'none'; // Ẩn/hiện thành viên
        });
    }

    // Lọc thành viên trong task
    function filterTaskMembers() {
        const input = document.getElementById('taskSearchInput').value.toLowerCase();
        const taskMembers = document.querySelectorAll('.panel:last-of-type .member-list li'); // Chọn danh sách thứ hai

        taskMembers.forEach(taskMember => {
            const name = taskMember.querySelector('.info p').textContent.toLowerCase();
            taskMember.style.display = name.includes(input) ? '' : 'none'; // Ẩn/hiện task member
        });
    }
    // Hiển thị modal khi người dùng nhấn vào nút xóa
function showDeleteWarning(event) {
    event.preventDefault(); // Ngừng form submit ngay lập tức
    var modal = document.getElementById('deleteWarningModal');
    modal.style.display = 'block';
}

// Đóng modal khi người dùng nhấn vào dấu "x"
function closeModal() {
    var modal = document.getElementById('deleteWarningModal');
    modal.style.display = 'none';
}

// Xác nhận xóa và gửi form
function confirmDelete() {
    // Xử lý xác nhận xóa
    var form = document.getElementById('deleteForm');
    form.submit(); // Gửi form để xóa Task
}

    function showTransferPopup() {
        document.getElementById('transferTaskOverlay').style.display = 'flex';
    }

    function closeTransferPopup() {
        document.getElementById('transferTaskOverlay').style.display = 'none';
    }

    function loadMemberSubtasks() {
        const fromMemberId = document.getElementById('fromMemberSelect').value;
        const subtasksSection = document.getElementById('subtasksSection');
        const subtasksList = document.getElementById('subtasksList');

        if (!fromMemberId) {
            subtasksSection.style.display = 'none';
            return;
        }

        // Get tasks for the selected member using AJAX
        $.ajax({
            url: '@Url.Action("GetMemberSubtasks", "Home")',
            type: 'GET',
            data: {
                parentTaskId: @Model.TaskID,
                memberId: fromMemberId
            },
            success: function(response) {
                if (response.success) {
                    // Display subtasks
                    subtasksList.innerHTML = response.tasks.map(task => `
                        <div class="subtask-item">
                            <input type="checkbox"
                                   id="task_${task.TaskID}"
                                   value="${task.TaskID}"
                                   class="task-checkbox"
                                   onchange="updateTransferButton()">
                            <label for="task_${task.TaskID}">${task.Description}</label>
                        </div>
                    `).join('');

                    subtasksSection.style.display = 'block';
                } else {
                    alert('Error loading subtasks: ' + response.message);
                }
                updateTransferButton();
            },
            error: function(xhr, status, error) {
                alert('Error loading subtasks: ' + error);
            }
        });
    }

    function confirmTransfer() {
        const fromMember = document.getElementById('fromMemberSelect');
        const toMember = document.getElementById('toMemberSelect');

        // Get all checked checkboxes and their values
        const selectedTasks = Array.from(document.querySelectorAll('.task-checkbox:checked'))
            .map(cb => parseInt(cb.value));

        console.log("Selected tasks:", selectedTasks); // Debug log

        if (selectedTasks.length === 0) {
            alert('Please select at least one task to transfer.');
            return;
        }

        const fromMemberName = fromMember.options[fromMember.selectedIndex].text;
        const toMemberName = toMember.options[toMember.selectedIndex].text;

        // Get task descriptions for the confirmation message
        const selectedTaskDescriptions = Array.from(document.querySelectorAll('.task-checkbox:checked'))
            .map(cb => cb.nextElementSibling.textContent);

        const message = `Bạn có chắc chắn muốn chuyển các task (${selectedTaskDescriptions.join(', ')}) của ${fromMemberName} sang cho ${toMemberName}?`;

        if (confirm(message)) {
            transferTasks(fromMember.value, toMember.value, selectedTasks);
        }
    }

    function transferTasks(fromMemberId, toMemberId, taskIds) {
        console.log("Sending transfer request:", { fromMemberId, toMemberId, taskIds }); // Debug log

        $.ajax({
            url: '@Url.Action("TransferTask", "Home")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                fromMemberId: fromMemberId,
                toMemberId: toMemberId,
                taskIds: taskIds
            }),
            success: function(response) {
                if (response.success) {
                    alert(response.message);
                    location.reload();
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function(xhr, status, error) {
                console.error("Transfer error:", error); // Debug log
                alert('An error occurred: ' + error);
            }
        });
    }

    function updateTransferButton() {
        const fromMember = document.getElementById('fromMemberSelect').value;
        const toMember = document.getElementById('toMemberSelect').value;
        const hasSelectedTasks = document.querySelectorAll('.task-checkbox:checked').length > 0;

        document.getElementById('transferButton').disabled = !fromMember || !toMember || !hasSelectedTasks;
    }

    function toggleAllTasks() {
        const selectAllCheckbox = document.getElementById('selectAllTasks');
        const taskCheckboxes = document.querySelectorAll('.task-checkbox');

        taskCheckboxes.forEach(checkbox => {
            checkbox.checked = selectAllCheckbox.checked;
        });

        updateTransferButton();
    }

</script>
