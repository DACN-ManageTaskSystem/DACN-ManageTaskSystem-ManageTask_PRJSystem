@model ManageTaskWeb.Models.TaskViewModel
@{
    ViewBag.Title = "DetailTask";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Comfortaa', sans-serif;
        background-color: #f7f7f7;
    }

    .breadcrumb {
        font-size: 20px;
        color: #888;
        margin: 20px 30px;
        width: 100%;
        font-weight: bold;
        padding-left: 100px;
    }

    .title {
        font-size: 22px;
        color: #d90000;
        font-weight: bold;
        margin-bottom: 15px;
        line-height: 1.2;
    }

    .task-info {
        font-size: 14px;
        color: #333;
        line-height: 1.6;
        margin-bottom: 20px;
    }

    .attachment-section {
        display: flex;
        align-items: center;
        margin: 20px 0;
    }

    .attachment-icon {
        width: 60px;
        height: 60px;
        margin-right: 10px;
    }

    .attachment-details {
        font-size: 14px;
        color: #333;
    }

    .progress-bar {
        width: 100%;
        background-color: #ddd;
        border-radius: 5px;
        overflow: hidden;
        margin: 15px 0;
    }

        .progress-bar .progress {
            height: 12px;
            background-color: #4caf50;
            width: 50%;
        }

    .status {
        font-size: 16px;
        margin: 20px 0;
        display: flex;
        align-items: center;
    }

        .status span {
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 5px;
            color: #333;
            margin-left: 10px;
        }

    .assigned-users, .creator {
        margin-top: 20px;
    }

        .assigned-users p, .creator p {
            font-size: 14px;
            color: #333;
            font-weight: bold;
            margin-bottom: 10px;
        }

    .user {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

        .user img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

    .user-name {
        font-size: 16px;
        color: #333;
    }

    .task-controls {
        display: flex;
        flex-direction: column; /* Arrange buttons in a vertical column */
        align-items: center; /* Center buttons horizontally */
        gap: 10px; /* Space between buttons */
    }



    .btn-discuss {
        background-color: white;
        color: black;
        border: 1px solid #007bff; /* Blue border */
    }

        .btn-discuss img {
            filter: invert(34%) sepia(50%) saturate(2866%) hue-rotate(188deg) brightness(95%) contrast(104%);
        }

    .btn-edit {
        background-color: #add8e6; /* Light blue */
        color: black;
    }

        .btn-edit img {
            filter: invert(21%) sepia(74%) saturate(626%) hue-rotate(155deg) brightness(92%) contrast(91%);
        }

    .btn-delete {
        background-color: #f8d7da; /* Light red */
        color: black;
    }

        .btn-delete img {
            filter: invert(17%) sepia(73%) saturate(3000%) hue-rotate(336deg) brightness(98%) contrast(98%);
        }

    .task-controls button:hover {
        transform: translateY(-2px); /* Slightly lift the button on hover */
        box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
    }

    .task-controls {
        display: flex;
        flex-direction: column; /* Arrange buttons in a vertical column */
        align-items: center; /* Center buttons horizontally */
        gap: 10px; /* Space between buttons */
    }

        .task-controls button {
            display: flex;
            align-items: center;
            justify-content: space-between; /* Space out text and icon */
            width: 250px; /* Set button width */
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            border: 1px solid transparent;
            border-radius: 10px; /* Rounded corners */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 10px
        }

            .task-controls button img {
                margin-left: auto; /* Push icon to the right side */
            }

    .btn-discuss {
        background-color: white;
        color: black;
        border: 1px solid #007bff; /* Blue border */
    }

        .btn-discuss img {
            filter: invert(34%) sepia(50%) saturate(2866%) hue-rotate(188deg) brightness(95%) contrast(104%);
        }

    .btn-edit {
        background-color: #add8e6; /* Light blue */
        color: black;
    }

        .btn-edit img {
            filter: invert(21%) sepia(74%) saturate(626%) hue-rotate(155deg) brightness(92%) contrast(91%);
        }

    .btn-delete {
        background-color: #f8d7da; /* Light red */
        color: black;
    }

        .btn-delete img {
            filter: invert(17%) sepia(73%) saturate(3000%) hue-rotate(336deg) brightness(98%) contrast(98%);
        }

    .task-controls button:hover {
        transform: translateY(-2px); /* Slightly lift the button on hover */
        box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
    }

    .arrow-right {
        display: inline-block; /* Đảm bảo phần tử nằm trên cùng dòng nếu cần */
        width: 10px;
        height: 10px;
        border: 2px solid #1E3A8A; /* Màu xanh đậm */
        border-left: none; /* Loại bỏ đường viền bên trái */
        border-top: none; /* Loại bỏ đường viền trên */
        transform: rotate(45deg); /* Xoay để mũi tên hướng phải */
        margin: 2px 15px; /* Điều chỉnh khoảng cách theo thiết kế */
    }


    .container {
        display: flex;
        gap: 40px; /* Adds space between columns */
        width: 90%;
        height: 90%;
        margin: 30px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .left-container {
        flex: 8; /* Left container takes 80% of the space */
        padding-right: 20px;
        border-right: 1px solid #ddd;
    }

    .right-container {
        flex: 2; /* Right container takes 20% of the space */
        padding-left: 20px;
    }


    .task-container {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: white;
    }

    .task-icon {
        font-size: 24px;
        color: green;
        margin-right: 10px;
    }

    .task-details {
        flex: 1;
        font-size: 16px;
        color: #333;
    }

    .delete-icon {
        color: #f44336;
        font-size: 18px;
        cursor: pointer;
        margin-left: 10px;
    }

    .input-section {
        display: flex;
        align-items: center;
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: white;
    }

        .input-section i {
            color: #888;
            margin-right: 10px;
            font-size: 18px;
        }

    .input-field {
        flex: 1;
        border: none;
        font-size: 16px;
        outline: none;
    }

    .send-icon {
        font-size: 20px;
        color: #3b82f6;
        cursor: pointer;
    }

    .footer-task {
        margin-top: 20px;
        display: flex;
        align-items: center;
        font-size: 16px;
        color: #333;
        cursor: pointer;
    }

        .footer-task i {
            margin-left: 5px;
        }

        .footer-task:hover {
            color: #007bff;
        }

    hr {
        margin-top: 20px;
        border: none;
        border-top: 1px solid #ddd;
    }

    .date-container {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #666;
        font-family: Arial, sans-serif;
    }

    .date-text {
        margin-right: 10px;
        line-height: 1.5;
    }

    .double-arrow {
        color: red;
        font-size: 25px;
    }

    .button .icon {
        display: inline-block;
        width: 16px;
        height: 16px;
        margin-right: 10px;
        border: 2px solid black;
        border-radius: 2px;
        position: relative;
    }

        .button .icon::before,
        .button .icon::after {
            content: '';
            position: absolute;
            background-color: black;
        }

        .button .icon::before {
            width: 10px;
            height: 2px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .button .icon::after {
            width: 2px;
            height: 10px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }



    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5); /* Màu nền bán trong suốt */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999; /* Đảm bảo lớp phủ nằm trên tất cả các phần tử khác */
        visibility: hidden;
    }

    .blind-container-1 {
        width: 70%;
        background: #ffffff;
        padding: 20px;
        border-radius: 8px;
        position: relative;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 1000; /* Đảm bảo hộp container nằm trên overlay */
    }

    h2 {
        text-align: center;
        color: #333;
        margin-bottom: 10px;
        padding: 10px 50px 10px 50px;
    }

    .close-button {
        position: absolute;
        top: 20px;
        right: 20px;
        font-size: 20px;
        cursor: pointer;
        color: #666;
    }

    .member-section {
        display: flex;
        gap: 20px;
    }

    .panel {
        flex: 1;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        background: #fafafa;
    }

        .panel h3 {
            color: #2d5c89;
            text-align: center;
            margin-bottom: 10px;
        }

    .search-bar {
        display: flex;
        align-items: center;
        gap: 5px;
        margin-bottom: 15px;
    }

        .search-bar input[type="text"] {
            flex: 1;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .search-bar button {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            color: #666;
        }



    .member-list {
        list-style: none;
        margin-bottom: 10px;
    }

        .member-list li {
            display: flex;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #e0e0e0;
        }

    .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        overflow: hidden;
        display: inline-block;
        margin-right: 30px;
    }

    .avatar-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }



    .info {
        flex: 1;
    }

        .info p {
            font-weight: bold;
            color: #333;
        }

    .role {
        font-size: 0.9em;
        color: #4a90e2;
    }

        .role.project-manager {
            color: #e74c3c;
        }

    .add-button {
        font-size: 18px;
        background: none;
        border: none;
        cursor: pointer;
        color: #2d5c89;
    }

    .pagination {
        display: flex;
        justify-content: center;
        gap: 5px;
    }

        .pagination button {
            padding: 5px 10px;
            border: 1px solid #ddd;
            background-color: #ffffff;
            cursor: pointer;
        }

            .pagination button.active {
                background-color: #2d5c89;
                color: #ffffff;
            }

    .completed {
        background-color: lightgreen; /* Màu xanh lá */
    }

    .in-progress {
        background-color: gold; /* Màu xanh dương */
    }

    .pending {
        background-color: orange; /* Màu cam */
    }

    .default {
        background-color: gray; /* Màu mặc định nếu không có trạng thái */
    }
    /* Tùy chỉnh giao diện cho toàn bộ combo box */
    .status-dropdown {
        width: 100px; /* Chiều rộng của combo box */
        padding: 8px; /* Đệm bên trong */
        border: 1px solid #ccc; /* Đường viền */
        border-radius: 4px; /* Bo tròn góc */
        font-size: 14px; /* Kích thước chữ */
        color: #333; /* Màu chữ */
        background-color: #f9f9f9; /* Màu nền */
        cursor: pointer; /* Con trỏ chuột khi hover */
    }

    .transfer-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 5px 15px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .transfer-button:hover {
        background-color: #45a049;
    }

    .member-item {
        display: flex;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
    }

    .member-item:hover {
        background-color: #f5f5f5;
    }

    #memberSearch {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
.btn-transfer {
    background-color: #9c27b0;
    color: white;
    border: none;
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 250px;
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border-radius: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: all 0.3s;
    margin-top: 10px;
}

.btn-transfer:hover {
    transform: translateY(-2px);
    box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15);
}

.btn-transfer img {
    filter: invert(100%);
    margin-left: auto;
}
        /* Hiệu ứng khi hover vào combo box */
        .status-dropdown:hover {
            border-color: #007bff; /* Màu đường viền khi hover */
            background-color: #fff; /* Màu nền khi hover */
        }

        /* Thay đổi giao diện khi chọn trạng thái */
        .status-dropdown:focus {
            outline: none; /* Xóa viền mặc định khi focus */
            border-color: #007bff; /* Đổi màu đường viền khi focus */
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Hiệu ứng shadow khi focus */
        }

        /* Tùy chỉnh màu cho các tùy chọn */
        .status-dropdown option {
            color: #333; /* Màu chữ của các tùy chọn */
            background-color: #fff; /* Màu nền của các tùy chọn */
        }
    /* Định dạng cơ bản cho combo box */
    .assigned-member-dropdown {
        width: 150px; /* Combo box chiếm toàn bộ chiều ngang container */
        padding: 8px; /* Khoảng cách bên trong */
        border: 1px solid #ccc; /* Đường viền */
        border-radius: 4px; /* Góc bo tròn */
        font-size: 14px; /* Kích thước chữ */
        background-color: #f9f9f9; /* Màu nền */
        color: #333; /* Màu chữ */
        cursor: pointer; /* Con trỏ thay đổi thành bàn tay khi hover */
        transition: all 0.3s ease; /* Hiệu ứng mượt khi thay đổi trạng thái */
    }

        /* Khi combo box được hover */
        .assigned-member-dropdown:hover {
            background-color: #e6f7ff; /* Thay đổi màu nền khi hover */
            border-color: #1890ff; /* Thay đổi màu đường viền */
        }

        /* Khi combo box được focus (được chọn) */
        .assigned-member-dropdown:focus {
            outline: none; /* Xóa khung viền mặc định */
            border-color: #40a9ff; /* Màu viền khi focus */
            box-shadow: 0 0 5px rgba(24, 144, 255, 0.5); /* Hiệu ứng đổ bóng */
        }

        /* Tùy chỉnh mũi tên dropdown */
        .assigned-member-dropdown::-ms-expand {
            display: none; /* Ẩn mũi tên mặc định trên IE */
        }

        .assigned-member-dropdown option {
            background-color: #ffffff; /* Nền của các lựa chọn */
            color: #333; /* Màu chữ */
        }

            /* Tùy chỉnh màu khi chọn một mục */
            .assigned-member-dropdown option:checked {
                background-color: #bae7ff; /* Màu nền của mục đã chọn */
                color: #000; /* Màu chữ */
            }

    .assigned-users {
        width: 100%; /* Adjust as needed */
    }

    .user-list {
        max-height: 200px; /* Adjust height to fit 3 items */
        overflow-y: auto; /* Enable vertical scrolling */
    }

    .user {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

        .user img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
            object-fit: cover;
        }

    .user-name {
        font-size: 14px;
        .drive-link {
        text-decoration: none;
        color: #333;
        transition: color 0.3s;
    }

    .drive-link:hover {
        color: #1a73e8;  /* Google Drive blue color */
    }

    .attachment-icon {
        width: 40px;
        height: 40px;
        margin-right: 15px;
    }

    .attachment-section {
        display: flex;
        align-items: center;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        margin: 20px 0;
        transition: background-color 0.3s;
    }

    .attachment-section:hover {
        background-color: #f1f3f4;
    }
    }
</style>
<div class="breadcrumb">
    <span>Home</span> <div class="arrow-right"></div>
    <span>Tasks</span> <div class="arrow-right"></div>
    <span>DetailTask</span>
</div>
<div class="container">
    <div div="left-container">
        <div class="title">
            @Model.TaskName
            &nbsp;&nbsp;
            <div class="date-container" style="float:right">
                <div class="date-text">
                    <p>Start: @(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("dd/MM/yyyy HH:mm") : "N/A")</p>
                    <p>End: @(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("dd/MM/yyyy HH:mm") : "N/A")</p>
                </div>
                <div class="double-arrow">
                    @{
                        string iconClass = "";

                        // Determine the icon class based on the priority value
                        switch (Model.Priority)
                        {
                            case 1:
                                iconClass = "fa-angles-up ic1 icon";
                                break;
                            case 2:
                                iconClass = "fa-angle-up ic2 icon";
                                break;
                            case 3:
                                iconClass = "fa-bars ic3 icon";
                                break;
                            case 4:
                                iconClass = "fa-angle-down ic4 icon";
                                break;
                            case 5:
                                iconClass = "fa-angles-down ic5 icon";
                                break;
                            default:
                                iconClass = "fa-question-circle ic-default icon"; // Default icon for other cases
                                break;
                        }
                    }
                    <i class="fas @iconClass"></i>
                </div>
            </div>
        </div>

        <div class="task-info">
            <p><strong>Description:</strong> @Model.Description</p>
        </div>

        <div class="attachment-section">
            <img src="~/Content/images/drive-icon.png" alt="Google Drive" class="attachment-icon">
            <div class="attachment-details">
                @if (!string.IsNullOrEmpty(Model.DriveLink))
                {
                    <a href="@Model.DriveLink" target="_blank" class="drive-link">
                        <p><strong>Tài liệu của Task</strong></p>
                        <p>Nhấn để xem tài liệu</p>
                    </a>
                }
                else
                {
                    <p><strong>Tài liệu của Task</strong></p>
                    <p>Chưa có tài liệu</p>
                }
            </div>
        </div>

        @{
            // Initialize counters for Done and Pending tasks
            int doneCount = 0;
            int totalCount = 0; // Start at 0, since we only want to count tasks that match the ParentID

            // Initialize the progress percentage (default to 0)
            double progressPercentage = 0;

            // Iterate over the tasks
            foreach (var task in Model.ListTasks)
            {
                // Check if the task is a child of the current task
                var isChildTask = task.ParentTaskID == Model.TaskID;
                if (isChildTask)
                {
                    // Increment the total task counter
                    totalCount++;

                    // Check task status and increment the Done count if it's done
                    if (task.Status == "Done")
                    {
                        doneCount++;
                    }
                <div class="task-container">
                    @foreach (var assignment in Model.TaskAssignment)
                    {
                        if (assignment.TaskID == task.TaskID)
                        {
                            if (task.Status == "Done")
                            {

                                <div class="task-details">@task.Description</div>
                                <td>
                                    <select class="form-control status-dropdown" data-task-id="@task.TaskID" onchange="updateTaskStatus(this)">
                                        <option value="Pending" @(task.Status == "Pending" ? "selected" : "")>Pending</option>
                                        <option value="Done" @(task.Status == "Done" ? "selected" : "")>Done</option>
                                    </select>
                                </td>
                                <select class="form-control assigned-member-dropdown" data-assignment-id="@assignment.TaskAssignmentID" data-member-id="@assignment.MemberID" onchange="updateAssignedMember(this)">
                                    @foreach (var member in Model.AssignedMembers)
                                    {
                                        <option value="@member.MemberID" @(member.MemberID == assignment.MemberID ? "selected" : "")>
                                            @member.FullName
                                        </option>
                                    }
                                </select>
                                <i class="fas fa-times delete-icon" onclick="deleteSubTask(@task.TaskID)"></i>

                            }

                            else if (task.Status == "Pending")
                            {

                                <div class="task-details">@task.Description</div>
                                <td>
                                    <select class="form-control status-dropdown" data-task-id="@task.TaskID" onchange="updateTaskStatus(this)">
                                        <option value="Pending" @(task.Status == "Pending" ? "selected" : "")>Pending</option>
                                        <option value="Done" @(task.Status == "Done" ? "selected" : "")>Done</option>
                                    </select>
                                </td>
                                
                <select class="form-control assigned-member-dropdown" data-assignment-id="@assignment.TaskAssignmentID" data-member-id="@assignment.MemberID" onchange="updateAssignedMember(this)">
                    @foreach (var member in Model.AssignedMembers)
                    {
                        <option value="0" @(assignment.MemberID == "0" ? "selected" : "")>
                            Không có thành viên
                        </option>
                        <option value="@member.MemberID" @(member.MemberID == assignment.MemberID ? "selected" : "")>
                            @member.FullName
                        </option>
                    }
                </select>
                                <i class="fas fa-times delete-icon" onclick="deleteSubTask(@task.TaskID)"></i>

                            }
                        }
                    }
                </div>
                }
            }
            // Calculate the percentage of Done tasks only if there are tasks
            if (totalCount > 0)
            {
                progressPercentage = (double)doneCount / totalCount * 100;
            }
        }
        <br />
        <div style="font-weight:bold; color:darkblue">@doneCount/@totalCount Require Remaining</div>
        <div class="progress-bar">
            <div class="progress" style="width:@progressPercentage%"></div>
        </div>

        <!-- Input Section -->
        <div class="input-section">
            <i class="fas fa-clipboard-list"></i>

            <!-- Nhập mô tả task -->
            <input type="text" id="taskDescription" class="input-field" placeholder="Enter Task Description">
          
            </select>
            <!-- Các input ẩn -->
            <input type="hidden" id="taskName" value="@Model.TaskName">
            <input type="hidden" id="projectId" value="@Model.ProjectID">
            <input type="hidden" id="createbyId" value="@Model.Creator.MemberID">
            <input type="hidden" id="parentTaskId" value="@Model.TaskID">
            &nbsp;&nbsp;
            <!-- Biểu tượng gửi và sự kiện onclick -->
            <i class="fas fa-paper-plane send-icon" onclick="createSubTask()"></i>
        </div>

        <!-- Input ẩn để lưu MemberID đã chọn -->
        <input type="hidden" id="selectedMemberID" value="@Model.TaskAssignment.FirstOrDefault()?.MemberID" />

        <!-- Footer Section -->
        <hr>
        <div class="footer-task">
            Turn Back
            <i class="fas fa-undo-alt"></i>
        </div>
    </div>

    <div class="right-container">
        @{
            // Kiểm tra trạng thái và gán giá trị cho Model.Status
            if (doneCount > 0)
            {
                if (doneCount == totalCount)
                {
                    Model.Status = "Completed";  // Đổi trạng thái thành Completed
                }
                else
                {
                    Model.Status = "InProgress";  // Đổi trạng thái thành InProgress
                }
            }
            else
            {
                Model.Status = "Pending";  // Nếu doneCount == 0, trạng thái là Pending
            }

            // Gán lớp CSS cho trạng thái sau khi cập nhật Model.Status
            var statusClass = "";
            switch (Model.Status)
            {
                case "Completed":
                    statusClass = "completed";  // Màu xanh lá
                    break;
                case "InProgress":
                    statusClass = "in-progress";  // Màu xanh dương
                    break;
                case "Pending":
                    statusClass = "pending";  // Màu vàng
                    break;
                default:
                    statusClass = "default";  // Màu mặc định
                    break;
            }
        }
        <div class="status ">
            Status: <span class="@statusClass">@Model.Status</span>
        </div>


        <div class="assigned-users">
            <h6><strong>Người Làm</strong></h6>
            <div class="user-list">
                @foreach (var member in Model.AssignedMembers)
                {
                    <div class="user">
                        <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" alt="User">
                        <span class="user-name">
                            @member.FullName <br />
                            <span style="color:forestgreen; font-weight:bold">@member.Role</span>
                        </span>
                    </div>
                }
            </div>
        </div>


        <div class="creator">
            <h6><strong>Người Tạo</strong></h6>
            <div class="user">
                <img src="@Url.Content("~/Content/images/member-img/" + Model.Creator.ImageMember)" alt="User">
                <span class="user-name">@Model.Creator.FullName  <br /><span style="color:red; font-weight:bold">@Model.Creator.Role</span></span>
            </div>
        </div>
        <br />
        <h4><strong><center>Thao Tác</center></strong></h4>
        <div class="task-controls">
            <button class="button" id="button-member">
                Add/Delete Member   &nbsp;&nbsp;&nbsp;&nbsp;
                <span class="icon"></span>
            </button>
            <button class="btn-transfer" onclick="showTransferPopup()">
                Transfer Task <img src="transfer-icon.png" alt="Transfer">
            </button>
            <button class="btn-discuss" onclick="window.location.href='@Url.Action("GroupChat", "Home", new { projectId = Model.ProjectID })'">
                Thảo Luận <img src="discuss-icon.png" alt="Discuss">
            </button>
            



            <!-- Nút xóa task -->
            <form action="/Home/DeleteTaskByMember" method="post" id="deleteForm">
                <input type="hidden" name="taskId" value="@Model.TaskID" />
                <button class="btn-delete" type="submit" onclick="showDeleteWarning(event)">
                    Delete Task <img src="delete-icon.png" alt="Delete">
                </button>
            </form>

            <!-- Modal thông báo xác nhận xóa -->
            <div id="deleteWarningModal" class="modal">
                <div class="modal-content">
=                    <h2>Are you sure you want to delete this task?</h2>
                    <p>This action will also remove all related Task Assignments and Task Logs.</p>
                    <div style="display:flex; margin:auto">
                        <button id="confirmDelete" class="btn btn-danger" onclick="confirmDelete()">Yes, Delete</button>
                        <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    </div>
                    
                </div>
            </div>
            <style>
                /* Modal background */
                .modal {
                    display: none; /* Hidden by default */
                    position: fixed; /* Stay in place */
                    z-index: 1; /* Sit on top */
                    left: 0;
                    top: 0;
                    width: 100%;
                    height: 100%;
                    overflow: auto; /* Enable scroll if needed */
                    background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
                    padding-top: 60px;
                }

                /* Modal content */
                .modal-content {
                    background-color: white;
                    margin: 5% auto;
                    padding: 20px;
                    border: 1px solid #888;
                    width: 50%; /* Could be more or less, depending on screen size */
                    text-align: center;
                }

                /* Close button */
                .close {
                    color: #aaa;
                    float: right;
                    font-size: 28px;
                    font-weight: bold;
                }

                    .close:hover,
                    .close:focus {
                        color: black;
                        text-decoration: none;
                        cursor: pointer;
                    }

                /* Button styles */
                .btn-delete, .btn-danger, .btn-secondary {
                    padding: 10px 20px;
                    margin: 5px;
                    font-size: 16px;
                    cursor: pointer;
                }

                .btn-danger {
                    background-color: #d9534f;
                    color: white;
                }

                .btn-secondary {
                    background-color: #6c757d;
                    color: white;
                }

            </style>
        </div>
    </div>
</div>
</body>
<div class="overlay" id="overlay">
    <div class="blind-container-1">
        <h2>Add Members To Task</h2>
        <div class="close-button">✕</div>
        <div class="member-section">
            <!-- Members List -->
            <div class="panel">
                <h3>Members in Project</h3>
                <div class="search-bar">
                    <input type="text" id="projectSearchInput" placeholder="Search Name Members..." onkeyup="filterMembers()">
                    <button>🔍</button>
                </div>
                @foreach (var member in Model.ProjectMembers)
                {
                    <ul class="member-list">
                        <li>
                            <div class="avatar">
                                <!-- Display the member's image if available -->
                                <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" class="avatar-img" />
                            </div>
                            <div class="info">
                                <p>@member.FullName</p>
                                <span class="role @(member.Role == "Manager" ? "project-manager" : "")">@member.Role</span>
                            </div>
                            <button class="add-button"
                                    data-memberid="@member.MemberID"
                                    data-taskid="@Model.TaskID"
                                    data-assignedbyid="@Model.Creator.MemberID"
                                    onclick="assignEmployee(this)">
                                ➕
                            </button>
                        </li>
                    </ul>
                }


            </div>

            <!-- Members In Project -->
            <div class="panel">
                <h3>Members In Task</h3>
                <div class="search-bar">
                    <input type="text" id="taskSearchInput" placeholder="Search Name Members..." onkeyup="filterTaskMembers()">
                    <button>🔍</button>
                </div>
                <ul class="member-list">
                    @foreach (var member in Model.AssignedMembers)
                    {
                        <li>
                            <div class="avatar">
                                <!-- Display the member's image if available -->
                                <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" class="avatar-img" />
                            </div>
                            <div class="info">
                                <p>@member.FullName</p>
                                <span class="role @(member.Role == "Manager" ? "project-manager" : "")">@member.Role</span>
                            </div>

                            @* Chỉ hiển thị nút xóa nếu số lượng thành viên > 1 *@
                            @if (Model.AssignedMembers.Count() > 1)
                            {
                                <i class="fas fa-times delete-icon" onclick="deleteTaskAssignment('@Model.TaskID', '@member.MemberID')"></i>
                            }
                        </li>
                    }
                </ul>
            </div>
            <style>
                .member-list {
                    max-height: 300px; /* Chiều cao tối đa của danh sách, điều chỉnh theo nhu cầu */
                    overflow-y: auto; /* Hiển thị thanh cuộn khi nội dung vượt quá chiều cao */
                    padding: 0;
                    margin: 0;
                    list-style-type: none;
                }

                    .member-list li {
                        padding: 10px;
                        border-bottom: 1px solid #ccc; /* Thêm đường viền dưới mỗi item để dễ nhìn */
                    }

                .avatar-img {
                    width: 40px;
                    height: 40px;
                    border-radius: 50%;
                }

                .delete-icon {
                    cursor: pointer;
                    color: red;
                }
            </style>
        </div>
    </div>
</div>

<!-- Transfer Task Popup -->
<div class="overlay" id="transferTaskOverlay" style="display: none;">
    <div class="blind-container-1">
        <h2>Transfer Tasks</h2>
        <div class="close-button" onclick="closeTransferPopup()">✕</div>
        <div class="member-section">
            <!-- Current Member -->
            <div class="panel">
                <h3>Current Member</h3>
                <div class="member-list">
                    <li>
                        <div class="avatar">
                            <img src="@Url.Content("~/Content/images/member-img/" + Model.AssignedMembers.First().ImageMember)" class="avatar-img" />
                        </div>
                        <div class="info">
                            <p>@Model.AssignedMembers.First().FullName</p>
                            <span class="role @(Model.AssignedMembers.First().Role == "Manager" ? "project-manager" : "")">
                                @Model.AssignedMembers.First().Role
                            </span>
                        </div>
                    </li>
                </div>
            </div>

            <!-- Transfer To -->
            <div class="panel">
                <h3>Transfer To</h3>
                <div class="search-bar">
                    <input type="text" id="memberSearch" placeholder="Search members...">
                    <button onclick="searchMembers()">🔍</button>
                </div>
                <div id="membersList" class="member-list">
                    @foreach (var member in Model.ProjectMembers.Where(m => m.MemberID != Model.AssignedMembers.First().MemberID))
                    {
                        <li class="member-item" data-member-id="@member.MemberID">
                            <div class="avatar">
                                <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" class="avatar-img" />
                            </div>
                            <div class="info">
                                <p>@member.FullName</p>
                                <span class="role @(member.Role == "Manager" ? "project-manager" : "")">@member.Role</span>
                            </div>
                            <button class="transfer-button" onclick="transferTasks('@Model.AssignedMembers.First().MemberID', '@member.MemberID', '@Model.TaskID')">
                                Transfer
                            </button>
                        </li>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

</body>


<!-- Thêm jQuery từ CDN -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    function updateTaskStatus(selectElement) {
        // Lấy TaskID từ thuộc tính data-task-id
        var taskId = selectElement.getAttribute("data-task-id");
        var newStatus = selectElement.value; // Lấy trạng thái mới từ combo box

        var taskId_Main = '@Model.TaskID';  // Use the actual TaskID from your model
        // Gửi yêu cầu AJAX đến server
        fetch('/Home/UpdateStatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val() // Nếu sử dụng AntiForgeryToken
            },
            body: JSON.stringify({
                taskId: taskId,
                status: newStatus,
                taskId_Main:taskId_Main,
            })
        })
            .then(response => {
                if (response.ok) {
                    alert('Status updated successfully!');
                     location.reload(); // Tải lại trang hiện tại
                } else {
                    alert('Failed to update status.');
                }
            })
            .catch(error => {
                console.error('Error updating status:', error);
            });
    }


    // Kiểm tra sự kiện onchange trong dropdown
    function updateAssignedMember(selectElement) {
        console.log("Dropdown value changed");  // Kiểm tra khi dropdown thay đổi

        var taskAssignmentId = selectElement.getAttribute('data-assignment-id'); // ID của TaskAssignment
        var memberId = selectElement.value; // ID của thành viên mới được chọn

        console.log(`TaskAssignmentID: ${taskAssignmentId}, MemberID: ${memberId}`); // Kiểm tra giá trị

        // Gửi thông tin tới server để cập nhật TaskAssignment
        $.ajax({
            url: '/Home/UpdateAssignedMember',
            type: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val()
            },
            data: {
                taskAssignmentId: taskAssignmentId,
                memberId: memberId
            },
            success: function (response) {
                if (response.success) {
                    alert('Assigned member updated successfully!');
                } else {
                    alert('Failed to update assigned member.');
                }
            },
            error: function (error) {
                console.error('Error:', error);
            }
        });

    }
    // Lắng nghe sự kiện 'change' trên phần tử select

function createSubTask() {
    // Lấy giá trị được chọn từ select (ID của Member)

    // Thu thập dữ liệu từ các trường
    var subTask = {
        TaskName: document.getElementById('taskName').value,
        Description: document.getElementById('taskDescription').value,  // Lấy giá trị mô tả
        ProjectID: document.getElementById('projectId').value,
        ParentTaskID: parseInt(document.getElementById('parentTaskId').value),
        CreateBy: document.getElementById('createbyId').value,  // Lấy giá trị creator ID
        MemberID: "0"  // Lấy giá trị từ select
    };
 
    // Kiểm tra dữ liệu đầu vào
    if (!subTask.TaskName || !subTask.ProjectID || !subTask.Description || !subTask.MemberID) {
        alert("Please fill in all required fields.");
        return;
    }

    // Gửi yêu cầu AJAX
    $.ajax({
        url: '/Home/CreateSubTask',  // Đảm bảo URL này đúng
        type: 'POST',
        data: JSON.stringify(subTask),  // Gửi dữ liệu dưới dạng JSON
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
            if (response.success) {
                alert('SubTask created successfully!');
                location.reload();  // Reload lại trang sau khi tạo thành công
            } else {
                alert('Error: ' + response.message);
            }
        },
        error: function (xhr, status, error) {
            alert('An error occurred: ' + error);
        }
    });
}




    function deleteSubTask(taskId) {
        if (confirm("Are you sure you want to delete this task?")) {
            $.ajax({
                url: '/Home/DeleteSubTask', // URL của Action Method
                type: 'POST',
                data: { taskId: taskId },
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        // Reload lại danh sách task hoặc ẩn task đã xóa
                        location.reload();
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('An error occurred: ' + error);
                }
            });
        }
    }

    function assignEmployee(button) {
        var memberId = $(button).data('memberid');
        var taskId = $(button).data('taskid');
        var assignedByID = $(button).data('assignedbyid');

        // AJAX request to assign the employee to the task
        $.ajax({
            url: '/Home/AssignEmployee',  // The backend action URL
            type: 'POST',
            data: {
                memberId: memberId,
                taskId: taskId,
                assignedByID: assignedByID
            },
            success: function (response) {
                if (response.success) {
                    alert('Employee assigned successfully!');
                    location.reload();  // Reload the page to see the updated task assignment
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function (xhr, status, error) {
                alert('An error occurred: ' + error);
            }
        });
    }
    function deleteTaskAssignment(taskId, memberId) {
        if (confirm("Are you sure you want to remove this assignment?")) {
            $.ajax({
                url: '/Home/DeleteTaskAssignment', // URL for the delete action
                type: 'POST',
                data: JSON.stringify({ taskId: taskId, memberId: memberId }),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    if (response.success) {
                        alert("Task assignment deleted successfully!");
                        location.reload(); // Reload the page to refresh the list
                    } else {
                        alert("Error: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred: " + error);
                }
            });
        }
    }

    document.getElementById('button-member').addEventListener('click', function () {
        var overlay = document.getElementById('overlay');
        overlay.style.visibility = 'visible'; // Hiển thị overlay
    });

    document.querySelector('.close-button').addEventListener('click', function () {
        var overlay = document.getElementById('overlay');
        overlay.style.visibility = 'hidden'; // Hiển thị overlay
    });


    // Show transfer popup
    function showTransferPopup() {
        document.getElementById('transferTaskOverlay').style.display = 'flex';
    }

    // Close transfer popup
    function closeTransferPopup() {
        document.getElementById('transferTaskOverlay').style.display = 'none';
    }

    // Search members
    function searchMembers() {
        const searchText = document.getElementById('memberSearch').value.toLowerCase();
        const memberItems = document.querySelectorAll('.member-item');

        memberItems.forEach(item => {
            const memberName = item.querySelector('.info p').textContent.toLowerCase();
            if (memberName.includes(searchText)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Transfer tasks
    function transferTasks(fromMemberId, toMemberId, taskId) {
        if (!confirm('Are you sure you want to transfer this task?')) {
            return;
        }

        $.ajax({
            url: '@Url.Action("TransferTask", "Home")',
            type: 'POST',
            data: {
                fromMemberId: fromMemberId,
                toMemberId: toMemberId,
                taskId: taskId
            },
            success: function(response) {
                if (response.success) {
                    alert(response.message);
                    location.reload();
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function(xhr, status, error) {
                alert('An error occurred: ' + error);
            }
        });
    }

    // Add event listener for search input
    document.getElementById('memberSearch').addEventListener('input', searchMembers);


    // Lọc thành viên trong dự án
    function filterMembers() {
        const input = document.getElementById('projectSearchInput').value.toLowerCase();
        const members = document.querySelectorAll('.panel:first-of-type .member-list li'); // Chọn danh sách đầu tiên

        members.forEach(member => {
            const name = member.querySelector('.info p').textContent.toLowerCase();
            member.style.display = name.includes(input) ? '' : 'none'; // Ẩn/hiện thành viên
        });
    }

    // Lọc thành viên trong task
    function filterTaskMembers() {
        const input = document.getElementById('taskSearchInput').value.toLowerCase();
        const taskMembers = document.querySelectorAll('.panel:last-of-type .member-list li'); // Chọn danh sách thứ hai

        taskMembers.forEach(taskMember => {
            const name = taskMember.querySelector('.info p').textContent.toLowerCase();
            taskMember.style.display = name.includes(input) ? '' : 'none'; // Ẩn/hiện task member
        });
    }
    // Hiển thị modal khi người dùng nhấn vào nút xóa
function showDeleteWarning(event) {
    event.preventDefault(); // Ngừng form submit ngay lập tức
    var modal = document.getElementById('deleteWarningModal');
    modal.style.display = 'block';
}

// Đóng modal khi người dùng nhấn vào dấu "x"
function closeModal() {
    var modal = document.getElementById('deleteWarningModal');
    modal.style.display = 'none';
}

// Xác nhận xóa và gửi form
function confirmDelete() {
    // Xử lý xác nhận xóa
    var form = document.getElementById('deleteForm');
    form.submit(); // Gửi form để xóa Task
}

</script>
