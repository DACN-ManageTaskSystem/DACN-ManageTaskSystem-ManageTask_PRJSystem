@model ManageTaskWeb.Models.TaskViewModel
@{
    ViewBag.Title = "DetailTask";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Comfortaa', sans-serif;
        background-color: #f7f7f7;
    }

    .breadcrumb {
        font-size: 20px;
        color: #888;
        margin: 20px 30px;
        width:100%;
        font-weight:bold;
        padding-left:100px;
    }

    .title {
        font-size: 22px;
        color: #d90000;
        font-weight: bold;
        margin-bottom: 15px;
        line-height: 1.2;
    }

    .task-info {
        font-size: 14px;
        color: #333;
        line-height: 1.6;
        margin-bottom: 20px;
    }

    .attachment-section {
        display: flex;
        align-items: center;
        margin: 20px 0;
    }

    .attachment-icon {
        width: 60px;
        height: 60px;
        margin-right: 10px;
    }

    .attachment-details {
        font-size: 14px;
        color: #333;
    }

    .progress-bar {
        width: 100%;
        background-color: #ddd;
        border-radius: 5px;
        overflow: hidden;
        margin: 15px 0;
    }

        .progress-bar .progress {
            height: 12px;
            background-color: #4caf50;
            width: 50%;
        }

    .status {
        font-size: 16px;
        margin: 20px 0;
        display: flex;
        align-items: center;
    }

        .status span {
            font-weight: bold;
            background-color: #f5d47d;
            padding: 5px 10px;
            border-radius: 5px;
            color: #333;
            margin-left: 10px;
        }

    .assigned-users, .creator {
        margin-top: 20px;
    }

        .assigned-users p, .creator p {
            font-size: 14px;
            color: #333;
            font-weight: bold;
            margin-bottom: 10px;
        }

    .user {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

        .user img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

    .user-name {
        font-size: 16px;
        color: #333;
    }

    .task-controls {
        display: flex;
        flex-direction: column; /* Arrange buttons in a vertical column */
        align-items: center; /* Center buttons horizontally */
        gap: 10px; /* Space between buttons */
    }



    .btn-discuss {
        background-color: white;
        color: black;
        border: 1px solid #007bff; /* Blue border */
    }

        .btn-discuss img {
            filter: invert(34%) sepia(50%) saturate(2866%) hue-rotate(188deg) brightness(95%) contrast(104%);
        }

    .btn-edit {
        background-color: #add8e6; /* Light blue */
        color: black;
    }

        .btn-edit img {
            filter: invert(21%) sepia(74%) saturate(626%) hue-rotate(155deg) brightness(92%) contrast(91%);
        }

    .btn-delete {
        background-color: #f8d7da; /* Light red */
        color: black;
    }

        .btn-delete img {
            filter: invert(17%) sepia(73%) saturate(3000%) hue-rotate(336deg) brightness(98%) contrast(98%);
        }

    .task-controls button:hover {
        transform: translateY(-2px); /* Slightly lift the button on hover */
        box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
    }

    .task-controls {
        display: flex;
        flex-direction: column; /* Arrange buttons in a vertical column */
        align-items: center; /* Center buttons horizontally */
        gap: 10px; /* Space between buttons */
    }

        .task-controls button {
            display: flex;
            align-items: center;
            justify-content: space-between; /* Space out text and icon */
            width: 250px; /* Set button width */
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            border: 1px solid transparent;
            border-radius: 10px; /* Rounded corners */
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 10px
        }

            .task-controls button img {
                margin-left: auto; /* Push icon to the right side */
            }

    .btn-discuss {
        background-color: white;
        color: black;
        border: 1px solid #007bff; /* Blue border */
    }

        .btn-discuss img {
            filter: invert(34%) sepia(50%) saturate(2866%) hue-rotate(188deg) brightness(95%) contrast(104%);
        }

    .btn-edit {
        background-color: #add8e6; /* Light blue */
        color: black;
    }

        .btn-edit img {
            filter: invert(21%) sepia(74%) saturate(626%) hue-rotate(155deg) brightness(92%) contrast(91%);
        }

    .btn-delete {
        background-color: #f8d7da; /* Light red */
        color: black;
    }

        .btn-delete img {
            filter: invert(17%) sepia(73%) saturate(3000%) hue-rotate(336deg) brightness(98%) contrast(98%);
        }

    .task-controls button:hover {
        transform: translateY(-2px); /* Slightly lift the button on hover */
        box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
    }

    .arrow-right {
        display: inline-block; /* Keeps the div inline */
        width: 10px;
        height: 10px;
        border: 2px solid #1E3A8A; /* Dark blue color */
        border-left: none;
        border-top: none;
        transform: rotate(45deg);
        margin: 2px 15px 2px 15px; /* Adjust as needed */
    }

    .container {
        display: flex;
        gap: 40px; /* Adds space between columns */
        width: 90%;
        height: 90%;
        margin: 30px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .left-container {
        flex: 8; /* Left container takes 80% of the space */
        padding-right: 20px;
        border-right: 1px solid #ddd;
    }

    .right-container {
        flex: 2; /* Right container takes 20% of the space */
        padding-left: 20px;
    }


    .task-container {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: white;
    }

    .task-icon {
        font-size: 24px;
        color: green;
        margin-right: 10px;
    }

    .task-details {
        flex: 1;
        font-size: 16px;
        color: #333;
    }

    .delete-icon {
        color: #f44336;
        font-size: 18px;
        cursor: pointer;
        margin-left: 10px;
    }

    .input-section {
        display: flex;
        align-items: center;
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: white;
    }

        .input-section i {
            color: #888;
            margin-right: 10px;
            font-size: 18px;
        }

    .input-field {
        flex: 1;
        border: none;
        font-size: 16px;
        outline: none;
    }

    .send-icon {
        font-size: 20px;
        color: #3b82f6;
        cursor: pointer;
    }

    .footer-task {
        margin-top: 20px;
        display: flex;
        align-items: center;
        font-size: 16px;
        color: #333;
        cursor: pointer;
    }

        .footer-task i {
            margin-left: 5px;
        }

        .footer-task:hover {
            color: #007bff;
        }

    hr {
        margin-top: 20px;
        border: none;
        border-top: 1px solid #ddd;
    }

    .date-container {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #666;
        font-family: Arial, sans-serif;
    }

    .date-text {
        margin-right: 10px;
        line-height: 1.5;
    }

    .double-arrow {
        color: red;
        font-size: 25px;
    }

    .button .icon {
        display: inline-block;
        width: 16px;
        height: 16px;
        margin-right: 10px;
        border: 2px solid black;
        border-radius: 2px;
        position: relative;
    }

        .button .icon::before,
        .button .icon::after {
            content: '';
            position: absolute;
            background-color: black;
        }

        .button .icon::before {
            width: 10px;
            height: 2px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .button .icon::after {
            width: 2px;
            height: 10px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
</style>
<div class="breadcrumb">
    <span>Home</span> <div class="arrow-right"></div>
    <span>Tasks</span> <div class="arrow-right"></div>
    <span>ToDoList</span>
</div>
<div class="container">
    <div div="left-container">
        <div class="title">
            @Model.TaskName
            &nbsp;&nbsp;
            <div class="date-container" style="float:right">
                <div class="date-text">
                    <p>Start: @(Model.StartDate.HasValue ? Model.StartDate.Value.ToString("dd/MM/yyyy HH:mm") : "N/A")</p>
                    <p>End: @(Model.EndDate.HasValue ? Model.EndDate.Value.ToString("dd/MM/yyyy HH:mm") : "N/A")</p>
                </div>
                <div class="double-arrow">
                    <i class="fas fa-angle-double-up"></i>
                </div>
            </div>
        </div>

        <div class="task-info">
            <p><strong>Description:</strong> @Model.Description</p>
        </div>

        <div class="attachment-section">
            <img src="word-icon.png" alt="Word Document" class="attachment-icon">
            <div class="attachment-details">
                <p><strong>Tệp Đính Kèm:</strong> Mô tả dự án cho: Câu hỏi thực tập sinh</p>
                <p>2.9 MB</p>
            </div>
        </div>



        @{
            // Initialize counters for Done and Pending tasks
            int doneCount = 0;
            int totalCount = 0; // Start at 0, since we only want to count tasks that match the ParentID

            // Initialize the progress percentage (default to 0)
            double progressPercentage = 0;

            // Iterate over the tasks
            foreach (var task in Model.ListTasks)
            {
                // Check if the task is a child of the current task
                var isChildTask = task.ParentTaskID == Model.TaskID;
                if (isChildTask)
                {
                    // Increment the total task counter
                    totalCount++;

                    // Check task status and increment the Done count if it's done
                    if (task.Status == "Done")
                    {
                        doneCount++;
                    }

                    <div class="task-container">
                        <!-- Check task status and set icon accordingly -->
                        @if (task.Status == "Done")
                        {
                            <i class="fas fa-check task-icon"></i>
                            <div class="task-details">@task.Description</div>
                            <i class="fas fa-times delete-icon"></i>
                        }
                        else if (task.Status == "Pending")
                        {
                            <i class="fas fa-square task-icon" style="color: #b0b0b0;"></i>
                            <div class="task-details">@task.Description</div>
                            <i class="fas fa-times delete-icon"></i>
                        }
                    </div>
                }
            }

            // Calculate the percentage of Done tasks only if there are tasks
            if (totalCount > 0)
            {
                progressPercentage = (double)doneCount / totalCount * 100;
            }
        }
        <br />
        <div style="font-weight:bold; color:darkblue">@doneCount/@totalCount Require Remaining</div>
        <div class="progress-bar">
            <div class="progress" style="width:@progressPercentage%"></div>
        </div>





        <!-- Input Section -->
        <div class="input-section">
            <i class="fas fa-clipboard-list"></i>
            <input type="text" class="input-field" placeholder="Create Requirement .....">
            <i class="fas fa-paper-plane send-icon"></i>
        </div>

        <!-- Footer Section -->
        <hr>
        <div class="footer-task">
            Turn Back
            <i class="fas fa-undo-alt"></i>
        </div>
    </div>

    <div class="right-container">
        <div class="status">
            Status: <span>@Model.Status</span>
        </div>
        @foreach (var member in Model.AssignedMembers)
        {
            <div class="assigned-users">
                <h6><strong>Người Làm</strong></h6>
                <div class="user">
                    <img src="@Url.Content("~/Content/images/member-img/" + member.ImageMember)" alt="User">
                    <span class="user-name">@member.FullName <br /> <span style="color:forestgreen; font-weight:bold">@member.Role</span>  </span>

                </div>
            </div>

        }


        <div class="creator">
            <h6><strong>Người Tạo</strong></h6>
            <div class="user">
                <img src="@Url.Content("~/Content/images/member-img/" + Model.Creator.ImageMember)" alt="User">
                <span class="user-name">@Model.Creator.FullName  <br /><span style="color:red; font-weight:bold">@Model.Creator.Role</span></span>
            </div>
        </div>
        <br />
        <h4><strong><center>Thao Tác</center></strong></h4>
        <div class="task-controls">
            <button class="button">
                Add/Delete Member   &nbsp;&nbsp;&nbsp;&nbsp;
                <span class="icon"></span>
            </button>
            <button class="btn-discuss">
                Thảo Luận <img src="discuss-icon.png" alt="Discuss">
            </button>
            <button class="btn-edit">
                Edit Task <img src="edit-icon.png" alt="Edit">
            </button>

            <form action="@Url.Action("DeleteTaskByMember", "Home")" method="post">
                <input type="hidden" name="taskId" value="@Model.TaskID" />
                @foreach (var member in Model.AssignedMembers)
                {
                    <input type="hidden" name="memberId" value="@member.MemberID" />
                }
                <button class="btn-delete" type="submit">
                    Delete Task <img src="delete-icon.png" alt="Delete">
                </button>
            </form>
        </div>
    </div>
</div>
</body>
